prefix.control = "copingManual-controls-",
path = "graphs",
xLab.predictors = "Openness", width=5)
copingModelManual <- gam(cope_pwm ~ age*Openness, data=d, method="REML", family="binomial")
summary(copingModelManual)
generatePDF(copingModelManual, list("age"),list("Openness"),
prefix.predictors = "copingManual-predictors-",
prefix.control = "copingManual-controls-",
path = "graphs",
xLab.predictors = "Openness", width=4)
copingModelManual <- gam(cope_paper ~ age*Openness, data=d, method="REML", family="binomial")
generatePDF(copingModelManual, list("age"),list("Openness"),
prefix.predictors = "copingManual-predictors-",
prefix.control = "copingManual-controls-",
path = "graphs",
xLab.predictors = "Openness", width=4)
copingModelManual <- gam(cope_memorize ~ age*Openness, data=d, method="REML", family="binomial")
generatePDF(copingModelManual, list("age"),list("Openness"),
prefix.predictors = "copingManual-predictors-",
prefix.control = "copingManual-controls-",
path = "graphs",
xLab.predictors = "Openness", width=4)
manualCVs <- list("age")
manualIVs <- list("Openness");
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
copingModelManual <- gam(cope_pwm ~ age*Openness, data=d, method="REML", family="binomial")
manualCVs <- list("age")
manualIVs <- list("Openness");
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
copingModelManual <- gam(cope_paper ~ age*Openness, data=d, method="REML", family="binomial")
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Paper",
xLab.predictors = "Openness", xLab.control = "Age")
manualCVs <- list("age")
manualIVs <- list("Openness");
copingModelManual <- gam(cope_pwm ~ age*Openness, data=d, method="REML", family="binomial")
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
copingModelManual <- gam(cope_paper ~ age*Openness, data=d, method="REML", family="binomial")
plotsPaper <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Paper",
xLab.predictors = "Openness", xLab.control = "Age")
copingModelManual <- gam(cope_memorize ~ age*Openness, data=d, method="REML", family="binomial")
copingModelManual <- gam(cope_memorize ~ age*Openness, data=d, method="REML", family="binomial")
plotsMemorize <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Memorization",
xLab.predictors = "Openness", xLab.control = "Age")
source('~/Dissertation/statistics/personality/study-03/../../util.R', echo=TRUE)
multiplot(plotsPwm[[1]], plotsPaper[[1]], plotsMemorize[[1]],
plotsPwm[[2]], plotsPaper[[2]], plotsMemorize[[2]], cols=3)
multiplot(plotsPwm[[1]], plotsPwm[[2]],
plotsPaper[[1]], plotsPaper[[2]],
plotsMemorize[[1]], plotsMemorize[[2]], cols=3)
opennessAgeCopingPlot <- multiplot(plotsPwm[[1]], plotsPwm[[2]],
plotsPaper[[1]], plotsPaper[[2]],
plotsMemorize[[1]], plotsMemorize[[2]], cols=3)
ageModel <- gam(Openness ~ age, data=d, method="REML")
summary(ageModel)
ageModel <- gam(Openness ~ s(age), data=d, method="REML")
summary(ageModel)
plotGAM(ageModel,manualCVs, manualIVs)
ageModel <- gam(Openness ~ s(age)+it_background, data=d, method="REML")
summary(ageModel)
plotGAM(ageModel,manualCVs, manualIVs)
plotGAM(ageModel,list("age","Openness","it_background"), list("age","Openness","it_background"))
ageModel <- gam(Openness ~ age+it_background, data=d, method="REML")
summary(ageModel)
plotGAM(ageModel,list("age","Openness","it_background"), list("age","Openness","it_background"))
ageModel <- gam(Openness ~ age*it_background, data=d, method="REML")
summary(ageModel)
plotGAM(ageModel,list("age","Openness","it_background"), list("age","Openness","it_background"))
correlationFrame <- d[,which(names(d) %in% list("age","it_background","Openness"))]
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
library(corrplot)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
copingModelManual <- gam(reuse ~ age*Openness, data=d, method="REML", family="binomial")
plotsReuse <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Reuse",
xLab.predictors = "Openness", xLab.control = "Age")
multiplot(plotsPwm[[1]], plotsPwm[[2]],
plotsPaper[[1]], plotsPaper[[2]],
plotsMemorize[[1]], plotsMemorize[[2]],
plotsReuse[[1]], plotsReuse[[2]],
cols=3)
multiplot(plotsPwm[[1]], plotsPwm[[2]],
plotsPaper[[1]], plotsPaper[[2]],
plotsMemorize[[1]], plotsMemorize[[2]],
plotsReuse[[1]], plotsReuse[[2]],
cols=4)
copingModelManual <- gam(reuse ~ age*s(Openness), data=d, method="REML", family="binomial")
autoModelsCoping_simple <- lapply(autoModelsCoping,simplifyGAM,family="binomial")
autoModelsCoping <- lapply(binaryResponseVariables, getGam, d<-d,
controlVars <- controlVars,
predictors = predictorsB5,
family="binomial")
autoModelsCoping_simple <- lapply(autoModelsCoping,simplifyGAM,family="binomial")
for(i in autoModelsCoping_simple){
outputSummary(i,prefix="coping-simple-",path="summaries/coping")
}
lapply(autoModelsCoping_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="coping-simple-b5-predictors-", prefix.control="coping-simple-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
ggplot(d) + geom_histogram(aes(x=writeDown,colour=writeDown),stat = "count")
count(d$writeDown)
library(mgcv)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(compare)
source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
getGam <- function(responseVar, d, predictors, controlVars, method=NULL,select=FALSE,family="gaussian") {
smoothedPredictors <- lapply(predictors,smoothPredictors,k=5)
smoothedControls <- lapply(controlVars, function(var){
if (var=="age"){
c <- smoothPredictors(var,k=5)
} else{
c <- as.character(var)
}
c
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
concatControls = paste(smoothedControls,collapse = "+")
rightHand <- paste(concatPredictors, concatControls, sep = "+");
autoFormula <- as.formula(paste(responseVar,rightHand,sep = "~"))
# see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.selection.html
if(!is.null(method)){
m <- gam(autoFormula, select = select, data=d, method=method,family=family); # adding method="REML" results in less magic.
}
else{
m <- gam(autoFormula, select = select, data=d, family=family); # adding method="REML" results in less magic.
}
m
}
getGam <- function(responseVar, d, predictors, controlVars, select=FALSE,family="gaussian",...) {
smoothedPredictors <- lapply(predictors,smoothPredictors,k=5)
smoothedControls <- lapply(controlVars, function(var){
if (var=="age"){
c <- smoothPredictors(var,k=5)
} else{
c <- as.character(var)
}
c
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
concatControls = paste(smoothedControls,collapse = "+")
rightHand <- paste(concatPredictors, concatControls, sep = "+");
autoFormula <- as.formula(paste(responseVar,rightHand,sep = "~"))
# see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.selection.html
m <- gam(autoFormula, select = select, data=d, family=family, ...); # adding method="REML" results in less magic.
m
}
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".")
View(da)
count(da$gender)
da$gender[d$gender == "#N/A"] <- NA
da$gender[da$gender == "#N/A"] <- NA
da$gender <- factor(da$gender, levels = c("Male","Female"), labels=c("Male","Female"))
View(da)
renameColumn(da,"guesses_magnitude_log10","guesses_log10")
names(da)
renameColumn(da,"guesses_magnitude_log10","guesses_log10")
names(da)[names(da) == "guesses_magnitude_log10"] <- "guesses_log10"
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".")
da$gender[da$gender == "#N/A"] <- NA
da$gender <- factor(da$gender,labels=c("Male","Female"))
names(da)[names(da) == "guesses_magnitude_log10"] <- "guesses_log10"
da$chunks
da$chunks[da$chunks == "#N/A"] <- NA
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".",na.strings = "#N/A")
count(da$gender)
count(da$chunks)
da$chunks[da$chunks == NA]
da$chunks[da$chunks == NA,]
da$chunks[,da$chunks == NA]
da$chunks[da$chunks == NA]
View(da)
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".",na.strings = "#N/A")
count(da$gender)
da$gender <- factor(da$gender,labels=c("Male","Female"))
zxcvbnMetrics <- list("length",
"digits","symbols","uppercase","lowercase",
#"guesses",
"score",
"guesses_log10",
"substitutions","chunks"
);
dLongZxcvbn <- melt(d,id.vars="X...CASE",measure.vars=zxcvbnMetrics)
library(reshape2)
dLongZxcvbn <- melt(d,id.vars="X...CASE",measure.vars=zxcvbnMetrics)
dLongZxcvbn <- melt(da,id.vars="X...CASE",measure.vars=zxcvbnMetrics)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,20,1)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
count(da$length)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,max(da$length),1)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,max(da$length),1),trans = "log10") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,max(da$length),1),trans = "log") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,max(da$length),1),trans = "probability") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,max(da$length),1),trans = "boxcox") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,max(da$length),1),trans = "sqrt") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,20,1),trans = "sqrt") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,20,1)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,40,2),trans="log10") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
da[da$length==40]
da[da$length==40,]
tmp <- da - da[da$length==40,]
tmp <- da[-c(177)]
tmp <- da[-c(177),]
da <- da[-c(177),]
rm(tmp)
dLongZxcvbn <- melt(da,id.vars="X...CASE",measure.vars=zxcvbnMetrics)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,40,2),trans="log10") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,40,2)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,40,1)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
savePlot(pZxcvbnMetrics,"metrics-v2-overview.pdf",path="graphs",width=6.6,height=2)
savePlot(pZxcvbnMetrics,"metrics-v2-overview.pdf",path="graphs",width=6.6,height=3)
savePlot(pZxcvbnMetrics,"metrics-v2-overview.pdf",path="graphs",width=9,height=3)
sink(file="descriptives.txt")
print(describe(d))
print(describe(da))
sink(file=NULL)
describe(d)
describe(da)
predictorsB5 <- list("Openness","Conscientiousness", "Extraversion", "Agreeableness","Neuroticism");
controlVars <- list("age","gender","it_background","occupation")
correlationFrame <- da[,which(names(da) %in% predictorsB5)]
b5CorrPValues <- cor.mtest(correlationFrame)
library(corrplot)
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
wilcox.test(length~it_background,data = d,alternative = "less")
wilcox.test(length~it_background,data = da,alternative = "less")
correlationFrame <- da[,which(names(da) %in% predictorsB5)]
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
wilcox.test(length~it,data = da,alternative = "less")
da$it <- factor(da$it,levels = c(0,1))
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".",na.strings = "#N/A")
da$it <- factor(da$it,labels=c("no it","it"))
wilcox.test(length~it,data = da,alternative = "less")
wilcox.test(length~it,data = da)
renameColumn <- function(df,oldName,newName) {
names(df)[names(df) == oldName] <- newName
}
renameColumn(da,"o","Openness")
source("../../util.R");
da <- renameColumn(da,"o","Openness")
da <- renameColumn(da,"c","Conscientiousness")
da <- renameColumn(da,"e","Extraversion")
da <- renameColumn(da,"a","Agreeableness")
da <- renameColumn(da,"n","Neuroticism")
correlationFrame <- da[,which(names(da) %in% predictorsB5)]
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
wilcox.test(length~it,data = da)
da$occupation <- factor(da$occupation)
autoModelsMetrics <- lapply(zxcvbnMetrics, getGam, d<-da, controlVars = controlVars, predictors = predictorsB5)
controlVars <- list("age","gender","it","occupation")
autoModelsMetrics <- lapply(zxcvbnMetrics, getGam, d<-da, controlVars = controlVars, predictors = predictorsB5)
autoModelsMetrics_simple <- lapply(autoModelsMetrics, simplifyGAM)
summary(autoModelsMetrics[[1]])
summary(autoModelsMetrics_simple[[1]])
plotGAM(autoModelsMetrics_simple[[1]], predictors = predictorsB5, controlVariables = controlVars)[[1]]
min(da$Openness)
max(da$Openness)
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".",na.strings = "#N/A")
da$gender <- factor(da$gender,labels=c("Male","Female"))
da$it <- factor(da$it,labels=c("no it","it"))
da$occupation <- factor(da$occupation)
da <- da[-c(177),]
rm(d)
da <- renameColumn(da,"o","Openness")
da <- renameColumn(da,"c","Conscientiousness")
da <- renameColumn(da,"e","Extraversion")
da <- renameColumn(da,"a","Agreeableness")
da <- renameColumn(da,"n","Neuroticism")
dLongZxcvbn <- melt(da,id.vars="X...CASE",measure.vars=zxcvbnMetrics)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,40,1)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
View(da)
wilcox.test(length~it,data = da)
wilcox.test(length~it,data = da,alternative="greater")
autoModelsMetrics <- lapply(zxcvbnMetrics, getGam, d<-da, controlVars = controlVars, predictors = predictorsB5)
autoModelsMetrics_simple <- lapply(autoModelsMetrics, simplifyGAM)
summary(autoModelsMetrics_simple[[1]])
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
d$gender[d$gender == 3] <- NA
d$gender <- factor(d$gender, levels = c(1,2), labels=c("Male","Female"))
dKeyed <- d
reversedItems <- list("E1R","E3R","A1R","A3R","A4R","C2R","N2R","O5R")
dKeyed$E1R <- 6 - dKeyed$E1R
dKeyed$E3R <- 6 - dKeyed$E3R
dKeyed$A1R <- 6 - dKeyed$A3R
dKeyed$A4R <- 6 - dKeyed$A4R
dKeyed$C2R <- 6 - dKeyed$C2R
dKeyed$N2R <- 6 - dKeyed$N2R
dKeyed$O5R <- 6 - dKeyed$O5R
dKeyed$NeuroticismK <- dKeyed$N1 + dKeyed$N2R + dKeyed$N3 + dKeyed$N4
dKeyed$OpennessK <- dKeyed$O1 + dKeyed$O2 + dKeyed$O3 + dKeyed$O4 + dKeyed$O5R
dKeyed$ConscientiousnessK <- dKeyed$C1 + dKeyed$C2R + dKeyed$C3 + dKeyed$C4
dKeyed$AgreeablenessK <- dKeyed$A1R + dKeyed$A2 + dKeyed$A3R + dKeyed$A4R
dKeyed$ExtraversionK <- dKeyed$E1R + dKeyed$E2 + dKeyed$E3R + dKeyed$E4
compare(d,dKeyed) # should be false for the frames
max(dKeyed$Openness)
max(dKeyed$Conscientiousness)
max(dKeyed$ConscientiousnessK)
max(dKeyed$OpennessK)
max(dKeyed$NeuroticismK)
max(dKeyed$AgreeablenessK)
max(dKeyed$ExtraversionK)
min(dKeyed$OpennessK)
min(dKeyed$Openness)
lapply(autoModelsMetrics_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="predictors-", prefix.control="zxcvbn-b5-controls-",path="graphs/b5-zxcvbn",xLab.predictors = "Trait Scores")
library(mgcv)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(compare)
source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
getGam <- function(responseVar, d, predictors, controlVars, select=FALSE,family="gaussian",...) {
smoothedPredictors <- lapply(predictors,smoothPredictors,k=5)
smoothedControls <- lapply(controlVars, function(var){
if (var=="age"){
c <- smoothPredictors(var,k=5)
} else{
c <- as.character(var)
}
c
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
concatControls = paste(smoothedControls,collapse = "+")
rightHand <- paste(concatPredictors, concatControls, sep = "+");
autoFormula <- as.formula(paste(responseVar,rightHand,sep = "~"))
# see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.selection.html
m <- gam(autoFormula, select = select, data=d, family=family, ...); # adding method="REML" results in less magic.
m
}
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".",na.strings = "#N/A")
da$gender <- factor(da$gender,labels=c("Male","Female"))
da$it <- factor(da$it,labels=c("no it","it"))
da$occupation <- factor(da$occupation)
da <- da[-c(177),]
da <- renameColumn(da,"o","Openness")
da <- renameColumn(da,"c","Conscientiousness")
da <- renameColumn(da,"e","Extraversion")
da <- renameColumn(da,"a","Agreeableness")
da <- renameColumn(da,"n","Neuroticism")
zxcvbnMetrics <- list("length",
"digits","symbols","uppercase","lowercase",
#"guesses",
"score",
"guesses_log10",
"substitutions","chunks"
);
predictorsB5 <- list("Openness","Conscientiousness", "Extraversion", "Agreeableness","Neuroticism");
controlVars <- list("age","gender","it","occupation")
correlationFrame <- da[,which(names(da) %in% predictorsB5)]
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
wilcox.test(length~it,data = da, alternative="greater")
autoModelsMetrics <- lapply(zxcvbnMetrics, getGam, d<-da, controlVars = controlVars, predictors = predictorsB5)
autoModelsMetrics_simple <- lapply(autoModelsMetrics, simplifyGAM)
lapply(autoModelsMetrics_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="predictors-", prefix.control="zxcvbn-b5-controls-",path="graphs/b5-zxcvbn",xLab.predictors = "Trait Scores")
for(i in autoModelsMetrics_simple){
outputSummary(i,prefix="zxcvbn-v2-",path="summaries/zxcvbn")
}
