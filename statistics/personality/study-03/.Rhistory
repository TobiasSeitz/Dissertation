c <- smoothPredictors(var,k=5)
} else{
c <- as.character(var)
}
c
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
concatControls = paste(smoothedControls,collapse = "+")
rightHand <- paste(concatPredictors, concatControls, sep = "+");
autoFormula <- as.formula(paste(responseVar,rightHand,sep = "~"))
# see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.selection.html
m <- gam(autoFormula, select = select, data=d, family=family, ...); # adding method="REML" results in less magic.
m
}
da <- read.csv("data/Neumann_Aline_Datensatz.csv", sep = ";", dec = ".",na.strings = "#N/A")
da$gender <- factor(da$gender,labels=c("Male","Female"))
da$it <- factor(da$it,labels=c("no it","it"))
da$occupation <- factor(da$occupation)
da <- da[-c(177),]
da <- renameColumn(da,"o","Openness")
da <- renameColumn(da,"c","Conscientiousness")
da <- renameColumn(da,"e","Extraversion")
da <- renameColumn(da,"a","Agreeableness")
zxcvbnMetrics <- list("length",
"digits","symbols","uppercase","lowercase",
#"guesses",
"score",
"guesses_log10",
"substitutions","chunks"
);
predictorsB5 <- list("Openness","Conscientiousness", "Extraversion", "Agreeableness","Neuroticism");
controlVars <- list("age","gender","it","occupation")
b5Items <- subset(da, select = 18:38);
View(b5Items)
names(da)
library(mgcv)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(compare)
source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
getGam <- function(responseVar, d, predictors, controlVars, method=NULL,select=FALSE,family="gaussian") {
smoothedPredictors <- lapply(predictors,smoothPredictors,k=5)
smoothedControls <- lapply(controlVars, function(var){
if (var=="age"){
c <- smoothPredictors(var,k=5)
} else{
c <- as.character(var)
}
c
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
concatControls = paste(smoothedControls,collapse = "+")
rightHand <- paste(concatPredictors, concatControls, sep = "+");
autoFormula <- as.formula(paste(responseVar,rightHand,sep = "~"))
# see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.selection.html
if(!is.null(method)){
m <- gam(autoFormula, select = select, data=d, method=method,family=family); # adding method="REML" results in less magic.
}
else{
m <- gam(autoFormula, select = select, data=d, family=family); # adding method="REML" results in less magic.
}
m
}
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
View(d)
b5Items <- subset(d, select = 18:38);
View(b5Items)
names(b5Items)
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
d$gender[d$gender == 3] <- NA
d$gender <- factor(d$gender, levels = c(1,2), labels=c("Male","Female"))
b5Items <- subset(d, select = 18:38);
for(item in names(b5Items)) {
d[[item]] <- 6 - d[[item]]
}
View(d)
d$Openness <- d$O1 + d$O2 + d$O3 + d$O4 + d$O5R;
d$Conscientiousness <- d$C1 + d$C2R + d$C3 + d$C4;
d$Extraversion <- d$E1R + d$E2 + d$E3R + d$E4;
d$Agreeableness <- d$A1R + d$A2 + d$A3R + d$A4R;
d$Neuroticism <- d$N1 + d$N2R + d$N3 + d$N4;
library(mgcv)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(compare)
source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
getGam <- function(responseVar, d, predictors, controlVars, method=NULL,select=FALSE,family="gaussian") {
smoothedPredictors <- lapply(predictors,smoothPredictors,k=5)
smoothedControls <- lapply(controlVars, function(var){
if (var=="age"){
c <- smoothPredictors(var,k=5)
} else{
c <- as.character(var)
}
c
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
concatControls = paste(smoothedControls,collapse = "+")
rightHand <- paste(concatPredictors, concatControls, sep = "+");
autoFormula <- as.formula(paste(responseVar,rightHand,sep = "~"))
# see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.selection.html
if(!is.null(method)){
m <- gam(autoFormula, select = select, data=d, method=method,family=family); # adding method="REML" results in less magic.
}
else{
m <- gam(autoFormula, select = select, data=d, family=family); # adding method="REML" results in less magic.
}
m
}
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
d$gender[d$gender == 3] <- NA
d$gender <- factor(d$gender, levels = c(1,2), labels=c("Male","Female"))
b5Items <- subset(d, select = 18:38);
for(item in names(b5Items)) {
d[[item]] <- 6 - d[[item]]
}
d$Openness <- d$O1 + d$O2 + d$O3 + d$O4 + d$O5R;
d$Conscientiousness <- d$C1 + d$C2R + d$C3 + d$C4;
d$Extraversion <- d$E1R + d$E2 + d$E3R + d$E4;
d$Agreeableness <- d$A1R + d$A2 + d$A3R + d$A4R;
d$Neuroticism <- d$N1 + d$N2R + d$N3 + d$N4;
zxcvbnMetrics <- list("length",
"digits","symbols","uppercase","lowercase",
#"guesses",
"score",
"guesses_log10",
"substitutions","chunks"
);
dLongZxcvbn <- melt(d,id.vars="X...CASE",measure.vars=zxcvbnMetrics)
(pZxcvbnMetrics <- ggplot(dLongZxcvbn,aes(variable,value)) +
geom_boxplot(aes(colour=variable)) +
labs(x="Metric",y="Value", col="Metric") +
scale_y_continuous(breaks = seq(0,20,1)) +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank()) +
coord_flip()
)
sink(file="descriptives.txt")
print(describe(d))
sink(file=NULL)
describe(d)
correlationFrame <- d[,which(names(d) %in% predictorsB5)]
b5CorrPValues <- cor.mtest(correlationFrame)
predictorsB5 <- list("Openness","Conscientiousness", "Extraversion", "Agreeableness","Neuroticism");
controlVars <- list("age","gender","it_background","occupation")
correlationFrame <- d[,which(names(d) %in% predictorsB5)]
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
wilcox.test(length~it_background,data = d,alternative = "less")
autoModelsMetrics <- lapply(zxcvbnMetrics, getGam, d<-d, controlVars = controlVars, predictors = predictorsB5)
autoModelsMetrics_simple <- lapply(autoModelsMetrics, simplifyGAM)
summary(autoModelsMetrics[[1]])
summary(autoModelsMetrics_simple[[1]])
anova(autoModelsMetrics_simple[[1]],autoModelsMetrics[[1]])
plot(autoModelsMetrics[[1]], jit=TRUE,pages=1)
plotGAM(autoModelsMetrics_simple[[1]], predictors = predictorsB5, controlVariables = controlVars)[[1]]
lapply(autoModelsMetrics_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="zxcvbn-b5-predictors-", prefix.control="zxcvbn-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
for(i in autoModelsMetrics_simple){
outputSummary(i,prefix="zxcvbn-",path="summaries")
}
ggplot(data=d, aes(x=Neuroticism,y=length)) +
geom_point() +
#geom_jitter() +
geom_smooth(method="lm")
ggplot(data=d, aes(x=Neuroticism,y=length)) +
geom_point() +
#geom_jitter() +
geom_smooth(method="loess")
alpha(b5Items,check.keys=TRUE)
alpha(b5Items,check.keys=F)
alpha(subset(d,select=30:33),check.keys=TRUE) # neuroticism
alpha(subset(b5Items,select=13:16),check.keys=TRUE) # neuroticism
pcB5 <- princomp(b5Items) # omit ID variable
summary(pcB5)
plot(pcB5)
b5FactorScores <- factanal(b5Items,factors=7,scores="regression")$scores
b5FactorScores <- as.data.frame(b5FactorScores)
faB5 <- data.frame(d,b5FactorScores)
predictorsFA <- as.list(names(b5FactorScores))
autoModelsMetricsFA <- lapply(zxcvbnMetrics, getGam,d<-faB5, predictors=predictorsFA,
controlVars = controlVars)
autoModelsMetricsFA_simple <- lapply(autoModelsMetricsFA,simplifyGAM);
lapply(autoModelsMetricsFA_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsFA,
prefix.predictors="zxcvbn-fa-predictors-", prefix.control="zxcvbn-fa-controls-",path="graphs/fa",xLab.predictors = "Factor Scores")
for(i in autoModelsMetricsFA_simple){
outputSummary(i,prefix="zxcvbn-",path="summaries/fa")
}
influenceMetrics <- list(
"Influence_commercials","Influence_music","Influence_experience",
"Influence_family","Influence_literature","Influence_music",
"Influence_mnemonics", "Influence_residency", "Influence_TV",
"Influence_videogames"
)
autoModelsInfluence <- lapply(influenceMetrics, getGam, d<-d, controlVars = controlVars, predictors = predictorsB5, family="binomial")
autoModelsInfluence_simple <- lapply(autoModelsInfluence, simplifyGAM, family="binomial")
lapply(autoModelsInfluence_simple,summary)
d$writeDown <- factor(d$writeDown, levels=c(1,2,3),labels=c("Password Manager","Paper","Memorized"))
ggplot(d) + geom_histogram(aes(x=writeDown,colour=writeDown),stat = "count")
count(d$writeDown)
pwmMask <- c(1,0,0)
paperMask <- c(0,1,0)
memoMask <- c(0,0,1)
d$cope_pwm <- pwmMask[d$writeDown]
d$cope_paper <- paperMask[d$writeDown]
d$cope_memorize <- memoMask[d$writeDown]
binaryResponseVariables <- list("reuse", "cope_pwm","cope_paper","cope_memorize")
autoModelsCoping <- lapply(binaryResponseVariables, getGam, d<-d,
controlVars <- controlVars,
predictors = predictorsB5,
family="binomial")
autoModelsCoping_simple <- lapply(autoModelsCoping,simplifyGAM,family="binomial")
plot(autoModelsCoping[[2]],jit=T,pages=1);
lapply(autoModelsCoping, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="coping-b5-predictors-", prefix.control="coping-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
lapply(autoModelsCoping_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="coping-simple-b5-predictors-", prefix.control="coping-simple-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
for(i in autoModelsCoping){
outputSummary(i,prefix="coping-",path="summaries/coping")
}
for(i in autoModelsCoping_simple){
outputSummary(i,prefix="coping-simple-",path="summaries/coping")
}
manualCVs <- list("age")
manualIVs <- list("Openness");
copingModelManual <- gam(cope_pwm ~ age*Openness, data=d, method="REML", family="binomial")
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
View(renameColumn)
View(plotGAM)
source("../../plotGAM.R");
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
source("../../util.R");
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
source("../../plotGAM.R");
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
source("../../plotGAM.R");
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
lapply(autoModelsMetrics_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="zxcvbn-b5-predictors-", prefix.control="zxcvbn-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
source('~/Dissertation/statistics/plotGAM.R', echo=TRUE)
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
source('~/Dissertation/statistics/plotGAM.R', echo=TRUE)
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
source('~/Dissertation/statistics/plotGAM.R', echo=TRUE)
lapply(autoModelsMetrics_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="zxcvbn-b5-predictors-", prefix.control="zxcvbn-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
plotsPwm <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Password Manager",
xLab.predictors = "Openness", xLab.control = "Age")
plotsPwm[[1]]
copingModelManual <- gam(cope_paper ~ age*Openness, data=d, method="REML", family="binomial")
plotsPaper <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Paper",
xLab.predictors = "Openness", xLab.control = "Age")
lapply(autoModelsCoping, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="coping-b5-predictors-", prefix.control="coping-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
lapply(autoModelsCoping_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="coping-simple-b5-predictors-", prefix.control="coping-simple-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
copingModelManual <- gam(cope_paper ~ age*Openness, data=d, method="REML", family="binomial")
plotsPaper <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Paper",
xLab.predictors = "Openness", xLab.control = "Age")
copingModelManual <- gam(cope_memorize ~ age*Openness, data=d, method="REML", family="binomial")
plotsMemorize <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Memorization",
xLab.predictors = "Openness", xLab.control = "Age")
copingModelManual <- gam(reuse ~ age*Openness, data=d, method="REML", family="binomial")
plotsReuse <- plotGAM(copingModelManual, manualCVs, manualIVs, yLab="Reuse",
xLab.predictors = "Openness", xLab.control = "Age")
lm(Openness ~ age, data=d)
summary(lm(Openness ~ age, data=d))
multiplot(plotsPwm[[1]], plotsPwm[[2]],
plotsPaper[[1]], plotsPaper[[2]],
plotsMemorize[[1]], plotsMemorize[[2]],
plotsReuse[[1]], plotsReuse[[2]],
cols=4)
ageModel <- gam(Openness ~ age*it_background, data=d, method="REML")
summary(ageModel)
plotGAM(ageModel,list("age","Openness","it_background"), list("age","Openness","it_background"))
correlationFrame <- d[,which(names(d) %in% list("age","it_background","Openness"))]
b5CorrPValues <- cor.mtest(correlationFrame)
corrplot(cor(correlationFrame),
method="color",
type="upper",
addCoef.col = "black",
p.mat = b5CorrPValues,
sig.level = 0.01,
insig = "blank"
)
View(d)
forgettingModel <- gam(forgot ~ lowercase + digits + symbols + uppercase + chunks , data=d, method="REML", family="binomial")
summary(forgettingModel)
forgettingModel <- gam(forgot ~ length * (lowercase + digits + symbols + uppercase + chunks), data=d, method="REML", family="binomial")
summary(forgettingModel)
forgettingModel <- gam(forgot ~ lowercase + digits + symbols + uppercase + chunks, data=d, method="REML", family="binomial")
forgettingModel <- gam(forgot ~ lowercase + digits + symbols + uppercase + chunks +
Openness + Agreeableness + Extraversion + Conscientiousness + Neuroticism,
data=d, method="REML", family="binomial")
summary(forgettingModel)
outputSummary(forgettingModel, "all-", "summaries/memorability")
forgettingModel <- gam(forgot ~ lowercase + digits + symbols + uppercase + chunks +
s(Openness,k=5) + s(Agreeableness,k=5) + s(Extraversion,k=5) + s(Conscientiousness,k=5) + s(Neuroticism,k=5),
data=d, method="REML", family="binomial")
summary(forgettingModel)
outputSummary(forgettingModel, "all-", "summaries/memorability")
plotGAM(forgettingModel, controlVariables = list("lowercase","digits","symbols","uppercase","chunks"),
predictors = predictorsB5
)
forgettingModelSplit <- gam(forgot ~ lowercase + digits + symbols + uppercase + chunks +
s(Openness,k=5) + s(Agreeableness,k=5) + s(Extraversion,k=5) + s(Conscientiousness,k=5) + s(Neuroticism,k=5),
data=d, method="REML", family="binomial")
rm(forgettingModel)
forgettingModelLength <- gam(forgot ~ (length * guesses_log10) +
s(Openness,k=5) + s(Agreeableness,k=5) + s(Extraversion,k=5) + s(Conscientiousness,k=5) + s(Neuroticism,k=5),
data=d, method="REML", family="binomial")
summary(forgettingModelLength)
forgettingModelLength <- gam(forgot ~ (length ) +
s(Openness,k=5) + s(Agreeableness,k=5) + s(Extraversion,k=5) + s(Conscientiousness,k=5) + s(Neuroticism,k=5),
data=d, method="REML", family="binomial")
summary(forgettingModelLength)
summary(forgettingModelLength)
plotGAM(forgettingModelLength, controlVariables = list("length"),
predictors = predictorsB5
)
forgettingModelLength <- gam(forgot ~ s(length) +
s(Openness,k=5) + s(Agreeableness,k=5) + s(Extraversion,k=5) + s(Conscientiousness,k=5) + s(Neuroticism,k=5),
data=d, method="REML", family="binomial")
summary(forgettingModelLength)
outputSummary(forgettingModelSplit, "length-", "summaries/memorability")
plotGAM(forgettingModelLength, controlVariables = list("length"),
predictors = predictorsB5
)
forgettingModelLength <- gam(forgot ~ length +
s(Openness,k=5) + s(Agreeableness,k=5) + s(Extraversion,k=5) + s(Conscientiousness,k=5) + s(Neuroticism,k=5),
data=d, method="REML", family="binomial")
summary(forgettingModelLength)
outputSummary(forgettingModelSplit, "length-", "summaries/memorability")
plotGAM(forgettingModelLength, controlVariables = list("length"),
predictors = predictorsB5
)
outputSummary(forgettingModelLength, "length-", "summaries/memorability")
forgettingModelOnlyLength <- gam(forgot ~ length,
data=d, method="REML", family="binomial")
summary(forgettingModelOnlyLength)
outputSummary(forgettingModelOnlyLength, "only-length-", "summaries/memorability")
anova.gam(forgettingModelLength,forgettingModelOnlyLength)
anova.gam(forgettingModelLength,forgettingModelOnlyLength, test="Chisq")
anova.gam(forgettingModelLength,forgettingModelOnlyLength, test="F")
anova.gam(forgettingModelLength,forgettingModelOnlyLength, test="Chisq")
anova.gam(forgettingModelLength,forgettingModelOnlyLength, test="Chisq", freq = T)
anova(autoModelsMetrics_simple[[1]],autoModelsMetrics[[1]], test="F")
anova(autoModelsMetrics_simple[[1]],autoModelsMetrics[[1]], test="Chisq")
count(d$length)
cor.mtest(d[,which(names(d) %in% list("gender","it_background"))])
cor.mtest(d[,which(names(d) %in% c("gender","it_background"))])
cor.mtest(d[,which(names(d) %in% c("gender","it_background","age"))])
cor.mtest(d[,which(names(d) %in% list("gender","it_background","age"))])
cor(d[,which(names(d) %in% list("gender","it_background","age"))])
opennessGam <- getSmoothedGAM("Openness",zxcvbnMetrics)
opennessGam <- getSmoothedGAM("Openness",zxcvbnMetrics, d <- d)
source("../../util.R");
opennessGam <- getSmoothedGAM("Openness",zxcvbnMetrics, d <- d)
source("getGam.R");
source("getGam.R");
opennessGam <- getGam("Openness",predictors=zxcvbnMetrics, d <- d)
opennessGam <- getGam("Openness",predictors=zxcvbnMetrics, controlVars = controlVars, d <- d)
opennessGam <- getGam("Openness",predictors=zxcvbnMetrics, controlVars = controlVars, d <- d,k=5)
source('~/Dissertation/statistics/personality/study-03/getGam.R')
zxcvbnMetricsInverse <- list("digits",
"symbols",
"uppercase",
"lowercase",
"substitutions",
"chunks"
);
opennessGam <- getGam("Openness",predictors=zxcvbnMetricsInverse, controlVars = controlVars, d <- d)
opennessGam <- getGam("Openness",predictors=zxcvbnMetricsInverse, controlVars = controlVars, d <- d,k=4)
summary(opennessGam)
b5Variables <- list("Openness","Conscientiousness", "Extraversion", "Agreeableness","Neuroticism");
b5Models <- lapply(b5Variables, getGam, predictors=zxcvbnMetricsInverse, controlVars = controlVars, d <- d,k=4)
b5Models_simple <- lapply(b5Models, simplifyGAM)
for(i in b5Models_simple) {
outputSummary(i,prefix="",path="summaries/inverse")
}
library(mgcv)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(compare)
source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
source("getGam.R");
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
d$gender[d$gender == 3] <- NA
d$gender <- factor(d$gender, levels = c(1,2), labels=c("Male","Female"))
d$type <- factor(d$type)
count(d$type)
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
d$type <- factor(d$type)
count(d$type)
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
count(d$type)
d <- read.csv("data/data_recoded.csv", sep = ";", dec = ".")
View(d)
d$type <- factor(d$type)
d$gender[d$gender == 3] <- NA
d$gender <- factor(d$gender, levels = c(1,2), labels=c("Male","Female"))
count(d$type)
d$t_common_topo <- 0
d$t_hardened_topo <- 0
d$t_mnemonic <- 0
d$t_passphrase <- 0
d$t_random <- 0
d$t_simple <- 0
d$t_systematic <- 0
d$t_common_topo[d$type=='common-topo'] <- 1
d$t_hardened_topo[d$type=='hardened-topo'] <- 1
d$t_mnemonic[d$type=='mnemonic'] <- 1
d$t_passphrase[d$type=='passphrase'] <- 1
d$t_random[d$type=='random'] <- 1
d$t_simple[d$type=='simple'] <- 1
d$t_systematic[d$type=='systematic'] <- 1
predictorsB5 <- list("Openness","Conscientiousness", "Extraversion", "Agreeableness","Neuroticism");
controlVars <- list("age","gender","it_background","occupation")
binaryPasswordTypeVariables <- list("t_common_topo","t_hardened_topo","t_mnemonic","t_passphrase","t_random","t_simple","t_systematic")
autoTypeModels <- lapply(binaryPasswordTypeVariables, getGam, d<-d,
controlVars <- controlVars,
predictors = predictorsB5,
family="binomial")
autoTypeModels_simple <- lapply(autoTypeModels, simplifyGAM, family="binomial")
lapply(autoTypeModels_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="pw-type-predictors-", prefix.control="pw-type-controls-",path="graphs/pw-type",xLab.predictors = "Trait Scores")
for(i in autoTypeModels_simple){
outputSummary(i,prefix="pw-type-",path="summaries/pw-type")
}
controlVars <- list("age","gender","it_background")
autoTypeModels <- lapply(binaryPasswordTypeVariables, getGam, d<-d,
controlVars <- controlVars,
predictors = predictorsB5,
family="binomial")
autoTypeModels_simple <- lapply(autoTypeModels, simplifyGAM, family="binomial")
lapply(autoTypeModels_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="pw-type-predictors-", prefix.control="pw-type-controls-",path="graphs/pw-type",xLab.predictors = "Trait Scores")
for(i in autoTypeModels_simple){
outputSummary(i,prefix="pw-type-",path="summaries/pw-type")
}
count(d$type)
autoTypeModels <- lapply(binaryPasswordTypeVariables, getGam, d<-d,
controlVars <- controlVars,
predictors = predictorsB5,
k=6,
family="binomial")
autoTypeModels_simple <- lapply(autoTypeModels, simplifyGAM, family="binomial", k=6)
for(i in autoTypeModels_simple){
outputSummary(i,prefix="pw-type-",path="summaries/pw-type")
}
autoTypeModels <- lapply(binaryPasswordTypeVariables, getGam, d<-d,
controlVars <- controlVars,
predictors = predictorsB5,
k=8,
family="binomial")
autoTypeModels_simple <- lapply(autoTypeModels, simplifyGAM, family="binomial", k=8)
lapply(autoTypeModels_simple, generatePDF,
controlVariables = controlVars, predictors = predictorsB5,
prefix.predictors="pw-type-predictors-", prefix.control="pw-type-controls-",path="graphs/pw-type",xLab.predictors = "Trait Scores")
for(i in autoTypeModels_simple){
outputSummary(i,prefix="pw-type-",path="summaries/pw-type")
}
d$complexity_level <- 0
d$complexity_level <- d$lowercase + (2*d$uppercase) + (3*d$digits) + (4*d$symbols)
count(d$complexity_level)
perceivedComplexityModel <- getGAM("perceived_complexity",predictorsB5, controlVars, d<-d, controls.smoothed = c("age"))
perceivedComplexityModel <- getGAM("complexity_level",predictorsB5, controlVars, d<-d, controls.smoothed = c("age"))
generatePDF(perceivedComplexityModel_simple, controlVariables =  controlVars, predictors = predictorsB5)
perceivedComplexityModel_simple <- simplifyGAM(perceivedComplexityModel)
generatePDF(perceivedComplexityModel_simple, controlVariables =  controlVars, predictors = predictorsB5)
