source('~/Dissertation/statistics/personality/study-01/../../util.R', echo=TRUE)
predictors <- list("Openness","Conscientiousness","Extraversion","Agreeableness","Neuroticism")
controls <- list("Age","Gender","IT") # important: start with a continuous variable, age is fine right now.
responsesGaussian <- list("emojiDif","twoWordDif","threeClassDif","meanTime");
autoModelsUsability <- lapply(responsesGaussian,
getGAM,
predictors=predictors,
controls=controls,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 5,
method="REML"
)
source('~/Dissertation/statistics/personality/study-01/../../util.R')
autoModelsUsability <- lapply(responsesGaussian,
getGAM,
predictors=predictors,
controls=controls,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 5,
method="REML"
)
data.difficulty$meanTime <- (data.difficulty$emojiTime + data.difficulty$threeClassTime + data.difficulty$twoWordTime) / 3;
autoModelsUsability <- lapply(responsesGaussian,
getGAM,
predictors=predictors,
controls=controls,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 5,
method="REML"
)
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM)
lapply(autoModelsUsability_simple, generatePDF,
controlVariables = controls, predictors = predictors,
prefix.predictors="predictors-", prefix.control="controls-",path="graphs/auto",xLab.predictors = "Trait Scores")
source('../../plotGAM.R')
lapply(autoModelsUsability_simple, generatePDF,
controlVariables = controls, predictors = predictors,
prefix.predictors="predictors-", prefix.control="controls-",path="graphs/auto",xLab.predictors = "Trait Scores")
for(i in autoModelsMetrics_simple){
outputSummary(i,prefix="zxcvbn-",path="summaries")
}
for(i in autoModelsUsability_simple){
outputSummary(i,prefix="zxcvbn-",path="summaries")
}
for(i in autoModelsUsability_simple){
outputSummary(i,prefix="auto-",path="summaries")
}
View(data.ratings)
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
responsesLogit <- list("emojiRat_binary","twoWordRat_binary","threeClassRat_binary");
predictorsLogit <- list("Openness","Conscientiousness","Extraversion","Agreeableness","Neuroticism")
controlsLogit <- list("Age","Gender","IT") # important: start with a continuous variable, age is fine right now.
responsesLogit <- list("emojiRat_binary","twoWordRat_binary","threeClassRat_binary");
predictorsLogit <- list("Openness","Conscientiousness","Extraversion","Agreeableness","Neuroticism")
controlsLogit <- list("Age","Gender","IT") # important: start with a continuous variable, age is fine right now.
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 5,
method="REML",
family=binomial(link="logit")
)
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('~/Dissertation/statistics/personality/study-01/../../util.R')
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 5,
method="REML",
family="binomial"
)
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.ratings,
k = 5,
method="REML",
family="binomial"
)
autoModelsRanking_simple <- lapply(autoModelsRanking, simplifyGAM)
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.ratings,
k = 5,
method="REML",
family=binomial()
)
autoModelsRanking_simple <- lapply(autoModelsRanking, simplifyGAM)
source('../../plotGAM.R')
lapply(autoModelsRanking, generatePDF,
controlVariables = controlsLogit, predictors = predictorsLogit,
prefix.predictors="rankin-predictors-", prefix.control="ranking-controls-",path="graphs/auto",xLab.predictors = "Trait Scores")
for(i in autoModelsRanking){
outputSummary(i,prefix="auto-ranking-",path="summaries")
}
sink(file=NULL)
View(data.ratings)
data.ratings <- read.csv("data/data_creationRating_emoji12 (103 Datasets).CSV",
sep = ";", dec = ",")
data.ratings$Gender[data.ratings$Gender == 3] <- NA
data.ratings$Gender <- factor(data.ratings$Gender,levels=c(1,2),labels=c("Male","Female"))
data.ratings$IT <- factor(data.ratings$IT,levels=c(1,2),labels=c("Yes","No"))
data.ratings$emojiPos <- factor(data.ratings$emojiPos)
data.ratings$twoWordPos <- factor(data.ratings$twoWordPos)
data.ratings$threeClassPos <- factor(data.ratings$threeClassPos)
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
model3 <- gam(emojiRat_binary ~ s(Age) + Gender + IT + s(Extraversion) + s(Agreeableness) +
s(Conscientiousness) + s(Neuroticism) + s(Openness) + emojiPos,
family = binomial(link = "logit"), data = data.ratings)
data.rating <- renameColumn(data.ratings, "Geschlecht","Gender")
data.rating <- renameColumn(data.ratings, "Alter","Age")
data.rating <- renameColumn(data.ratings, "Openess","Openness")
data.ratings$Gender[data.ratings$Gender == 3] <- NA
data.ratings$Gender <- factor(data.ratings$Gender,levels=c(1,2),labels=c("Male","Female"))
data.ratings$IT <- factor(data.ratings$IT,levels=c(1,2),labels=c("Yes","No"))
data.ratings$emojiPos <- factor(data.ratings$emojiPos)
data.ratings$twoWordPos <- factor(data.ratings$twoWordPos)
data.ratings$threeClassPos <- factor(data.ratings$threeClassPos)
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
model3 <- gam(emojiRat_binary ~ s(Age) + Gender + IT + s(Extraversion) + s(Agreeableness) +
s(Conscientiousness) + s(Neuroticism) + s(Openness) + emojiPos,
family = binomial(link = "logit"), data = data.ratings)
data.ratings <- read.csv("data/data_creationRating_emoji12 (103 Datasets).CSV",
sep = ";", dec = ",")
data.rating <- renameColumn(data.ratings, "Geschlecht","Gender")
data.rating <- renameColumn(data.ratings, "Alter","Age")
data.rating <- renameColumn(data.ratings, "Openess","Openness")
# factorize data set of policy ranking
data.ratings$Gender[data.ratings$Gender == 3] <- NA
data.ratings$Gender <- factor(data.ratings$Gender,levels=c(1,2),labels=c("Male","Female"))
data.ratings$IT <- factor(data.ratings$IT,levels=c(1,2),labels=c("Yes","No"))
data.ratings$emojiPos <- factor(data.ratings$emojiPos)
data.ratings$twoWordPos <- factor(data.ratings$twoWordPos)
data.ratings$threeClassPos <- factor(data.ratings$threeClassPos)
#############################################################################
#
# Model for calculating the likelihood of ranking a policy on a specific place
# --------------------------------------------------------------
# we use the data.ratings dataset because there was an inconsistency in the phrasing of the question for 18 people after we
# had changed to policy from 1emoji16 to 1emoji12
# clean data -- convert 0 to NA
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
# create distinct levels of ratings
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
# we model the preference for one policy or another as binary decision in each case (preferred = yes / no).
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
source('../../util.R')
data.ratings <- read.csv("data/data_creationRating_emoji12 (103 Datasets).CSV",
sep = ";", dec = ",")
data.rating <- renameColumn(data.ratings, "Geschlecht","Gender")
data.rating <- renameColumn(data.ratings, "Alter","Age")
data.rating <- renameColumn(data.ratings, "Openess","Openness")
# factorize data set of policy ranking
data.ratings$Gender[data.ratings$Gender == 3] <- NA
data.ratings$Gender <- factor(data.ratings$Gender,levels=c(1,2),labels=c("Male","Female"))
data.ratings$IT <- factor(data.ratings$IT,levels=c(1,2),labels=c("Yes","No"))
data.ratings$emojiPos <- factor(data.ratings$emojiPos)
data.ratings$twoWordPos <- factor(data.ratings$twoWordPos)
data.ratings$threeClassPos <- factor(data.ratings$threeClassPos)
#############################################################################
#
# Model for calculating the likelihood of ranking a policy on a specific place
# --------------------------------------------------------------
# we use the data.ratings dataset because there was an inconsistency in the phrasing of the question for 18 people after we
# had changed to policy from 1emoji16 to 1emoji12
# clean data -- convert 0 to NA
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
# create distinct levels of ratings
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
# we model the preference for one policy or another as binary decision in each case (preferred = yes / no).
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
controlsLogit <- list("Age","Gender","IT","emojiPos") # important: start with a continuous variable, age is fine right now.
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.ratings,
k = 5,
method="REML",
family=binomial()
)
names(data.ratings)[names(data.ratings) == "Geschlecht"] <- "Gender"
names(data.ratings)[names(data.ratings) == "Alter"] <- "Age"
names(data.ratings)[names(data.ratings) == "Openess"] <- "Openness"
data.ratings$Gender[data.ratings$Gender == 3] <- NA
data.ratings$Gender <- factor(data.ratings$Gender,levels=c(1,2),labels=c("Male","Female"))
data.ratings$IT <- factor(data.ratings$IT,levels=c(1,2),labels=c("Yes","No"))
data.ratings$emojiPos <- factor(data.ratings$emojiPos)
data.ratings$twoWordPos <- factor(data.ratings$twoWordPos)
data.ratings$threeClassPos <- factor(data.ratings$threeClassPos)
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
model3 <- gam(emojiRat_binary ~ s(Age) + Gender + IT + s(Extraversion) + s(Agreeableness) +
s(Conscientiousness) + s(Neuroticism) + s(Openness) + emojiPos,
family = binomial(link = "logit"), data = data.ratings)
source('~/Dissertation/statistics/personality/study-01/ranking.R', encoding = 'UTF-8', echo=TRUE)
sink(file=NULL)
sink(file=NULL)
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('~/Dissertation/statistics/personality/study-01/../../util.R')
source('../../util.R')
data.ratings <- read.csv("data/data_creationRating_emoji12 (103 Datasets).CSV",
sep = ";", dec = ",")
names(data.ratings)[names(data.ratings) == "Geschlecht"] <- "Gender"
names(data.ratings)[names(data.ratings) == "Alter"] <- "Age"
names(data.ratings)[names(data.ratings) == "Openess"] <- "Openness"
# factorize data set of policy ranking
data.ratings$Gender[data.ratings$Gender == 3] <- NA
data.ratings$Gender <- factor(data.ratings$Gender,levels=c(1,2),labels=c("Male","Female"))
data.ratings$IT <- factor(data.ratings$IT,levels=c(1,2),labels=c("Yes","No"))
data.ratings$emojiPos <- factor(data.ratings$emojiPos)
data.ratings$twoWordPos <- factor(data.ratings$twoWordPos)
data.ratings$threeClassPos <- factor(data.ratings$threeClassPos)
#############################################################################
#
# Model for calculating the likelihood of ranking a policy on a specific place
# --------------------------------------------------------------
# we use the data.ratings dataset because there was an inconsistency in the phrasing of the question for 18 people after we
# had changed to policy from 1emoji16 to 1emoji12
# clean data -- convert 0 to NA
data.ratings$emojiRat[data.ratings$emojiRat == 0] <- NA
data.ratings$twoWordRat[data.ratings$twoWordRat == 0] <- NA
data.ratings$threeClassRat[data.ratings$threeClassRat == 0] <- NA
# create distinct levels of ratings
data.ratings$emojiRat <- factor(data.ratings$emojiRat)
data.ratings$twoWordRat <- factor(data.ratings$twoWordRat)
data.ratings$threeClassRat <- factor(data.ratings$threeClassRat)
# we model the preference for one policy or another as binary decision in each case (preferred = yes / no).
data.ratings$emojiRat_binary <- factor(as.numeric(data.ratings$emojiRat == 1))
data.ratings$twoWordRat_binary <- factor(as.numeric(data.ratings$twoWordRat == 1))
data.ratings$threeClassRat_binary <- factor(as.numeric(data.ratings$threeClassRat == 1))
# since the decision is binary, we use a logit model.
model3 <- gam(emojiRat_binary ~ s(Age) + Gender + IT + s(Extraversion) + s(Agreeableness) +
s(Conscientiousness) + s(Neuroticism) + s(Openness) + emojiPos,
family = binomial(link = "logit"), data = data.ratings)
#plot(model3, pages = 1, jit = TRUE)
plot(model3, pages = 1, jit = TRUE, scale = 0)
summary(model3)
# k=5 beschreibt, dass Maximal ein Polynom vom Grad 5 verwendet werden soll.
emojiRanking <- gam(emojiRat_binary ~ s(Age, k=5) + Gender + IT + Extraversion + Agreeableness +
Conscientiousness + s(Neuroticism, k=5) + Openness + emojiPos,
family = binomial(link = "logit"), data = data.ratings)
plot(emojiRanking, pages = 1, scale = 0, jit = TRUE)
summary(emojiRanking)
outputSummary(emojiRanking, "ranking-","summaries",printBeta = FALSE)
twoWordRanking <- gam(twoWordRat_binary ~ s(Age, k=5) + Gender + IT + Extraversion + s(Agreeableness, k=5) +
Conscientiousness + Neuroticism + Openness + twoWordPos,
family = binomial(link = "logit"), data = data.ratings)
plot(twoWordRanking, pages = 1, scale = 0, jit = TRUE)
summary(twoWordRanking)
threeClassRanking <- gam(threeClassRat_binary ~ Age + Gender + IT + Extraversion + Agreeableness +
Conscientiousness + s(Neuroticism, k=5) + Openness + threeClassPos,
family = binomial(link = "logit"), data = data.ratings)
plot(threeClassRanking, pages = 1, scale = 0, jit = TRUE)
summary(threeClassRanking)
length(data.ratings$emojiRat_binary)
exp(1)
#die chance emoji auf platz 1 zu wählen steigt bei hohen agree werten.
#so ist sie z.b. bei einem unterschied von 1 exp(1) mal so groß
# create latex table from the three models.
texreg(list(emojiRanking, twoWordRanking, threeClassRanking),custom.model.names = c("emoji12","2word12","3class12"))
pModelComparisonplotreg <- plotreg(
list(emojiRanking, twoWordRanking, threeClassRanking),
custom.model.names = c("emoji12","2word12","3class12"),
file="rankingModelComparison.pdf"
)
# Repeated measures ANOVA (Untersuchung durch lineares gemischtes Modell) ---
dat1 <- data.difficulty[,c("emojiDif","twoWordDif","threeClassDif")]
dat2 <- data.difficulty[,c("emojiPos","twoWordPos","threeClassPos")]
dat1$Person <- dat2$id <- 1:nrow(dat1)
# Datensatz in long-Format bringen
dat1_long <- reshape(dat1, direction = "long", varying = 1:3,
v.names = "Dif", timevar = "PW_Art", idvar = "Person")
dat2_long <- reshape(dat2, direction = "long", varying = 1:3,
v.names = "Pos", timevar = "PW_Art", idvar = "Person")
dat_long <- merge(dat1_long, dat2_long, by = c("Person","PW_Art"))
head(dat_long)
dat_long$PW_Art[dat_long$PW_Art == 1] <- "emoji"
dat_long$PW_Art[dat_long$PW_Art == 2] <- "twoWord"
dat_long$PW_Art[dat_long$PW_Art == 3] <- "threeClass"
dat_long$PW_Art <- factor(dat_long$PW_Art)
# Ueberpruefen, ob Zuordnung noch stimmt
all.equal(sort(dat_long$Dif[dat_long$PW_Art == "emoji"]), sort(dat1$emojiDif))
all.equal(sort(dat_long$Dif[dat_long$PW_Art == "twoWord"]), sort(dat1$twoWordDif))
all.equal(sort(dat_long$Dif[dat_long$PW_Art == "threeClass"]), sort(dat1$threeClassDif))
str(dat_long)
# emoji ist die abhängige Variable
#m5 <- lmer(Dif ~ PW_Art + Pos + (1|Person), data = dat_long)
dat_long$PW_Art <- relevel(dat_long$PW_Art, "emoji")
m5 <- lmer(Dif ~ PW_Art + Pos + (1|Person), data = dat_long,
contrasts = list(Pos = contr.sum))
summary(m5)
anova(m5) # to get F values
# mache twoWord zur abhängigen Variable
dat_long$PW_Art <- relevel(dat_long$PW_Art, "twoWord")
m6 <- lmer(Dif ~ PW_Art + Pos + (1|Person), data = dat_long)
summary(m6)
anova(m6)
# mache threeClass zur abhängigen Variable
dat_long$PW_Art <- relevel(dat_long$PW_Art, "threeClass")
m7 <- lmer(Dif ~ PW_Art + Pos + (1|Person), data = dat_long)
summary(m7)
anova(m7)
texreg(m5)
exp(0.86) #?
#############################################################################
##  automate stuff for ranking
#############################################################################
responsesLogit <- list("emojiRat_binary","twoWordRat_binary","threeClassRat_binary");
predictorsLogit <- list("Openness","Conscientiousness","Extraversion","Agreeableness","Neuroticism")
controlsLogit <- list("Age","Gender","IT","emojiPos") # important: start with a continuous variable, age is fine right now.
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.ratings,
k = 5,
method="REML",
family=binomial()
)
autoModelsRanking_simple <- lapply(autoModelsRanking, simplifyGAM)
source('../../plotGAM.R')
### plot
lapply(autoModelsRanking, generatePDF,
controlVariables = controlsLogit, predictors = predictorsLogit,
prefix.predictors="rankin-predictors-", prefix.control="ranking-controls-",path="graphs/auto",xLab.predictors = "Trait Scores")
## summaries
for(i in autoModelsRanking){
outputSummary(i,prefix="auto-ranking-",path="summaries",printBeta = FALSE)
}
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM, family=binomial())
autoModelsRanking_simple <- lapply(autoModelsRanking, simplifyGAM, family=binomial())
source('../../plotGAM.R')
for(i in autoModelsRanking){
outputSummary(i,prefix="auto-ranking-",path="summaries",printBeta = FALSE)
}
for(i in autoModelsRanking_simple){
outputSummary(i,prefix="auto-ranking-",path="summaries",printBeta = FALSE)
}
controlsLogit <- list("Age","Gender","IT") # important: start with a continuous variable, age is fine right now.
autoModelsRanking <- lapply(responsesLogit,
getGAM,
predictors=predictorsLogit,
controls=controlsLogit,
controls.smoothed = list("Age"),
d <- data.ratings,
k = 5,
method="REML",
family=binomial()
)
autoModelsRanking_simple <- lapply(autoModelsRanking, simplifyGAM, family=binomial())
lapply(autoModelsRanking, generatePDF,
controlVariables = controlsLogit, predictors = predictorsLogit,
prefix.predictors="ranking-predictors-", prefix.control="ranking-controls-",path="graphs/auto",xLab.predictors = "Trait Scores")
for(i in autoModelsRanking_simple){
outputSummary(i,prefix="auto-ranking-",path="summaries",printBeta = FALSE)
}
View(timingTable_long)
View(timingTable)
library(mgcv)
library(ggplot2)
library(plyr)
library("texreg")
library(lme4)
library(reshape2)
source("../../plotCI.R");
source('../../util.R')
firstTaskData <- subset(data.difficulty, emojiPos == 1 | threeClassPos == 1 | twoWordPos == 1)
View(firstTaskData)
tmpData <- subset(data.difficulty, select=c("CASE","emojiPos","threeClassPos","twoWordPos","emojiTime","threeClassTime","twoWordTime"))
View(tmpData)
tmpData$firstTime <- 0
tmpData$firstTime[tmpData$emojiPos==1] <- tmpData$emojiTime[tmpData$emojiPos==1]
tmpData$firstTime[tmpData$emojiPos==0] <- tmpData$emojiTime[tmpData$emojiPos==0]
tmpData$firstTime <- 0
tmpData$firstTime[tmpData$emojiPos==0] <- tmpData$emojiTime[tmpData$emojiPos==0]
tmpData <- subset(data.difficulty, select=c("CASE","emojiPos","threeClassPos","twoWordPos","emojiTime","threeClassTime","twoWordTime"))
tmpData$firstTime <- 0
tmpData$firstTime[tmpData$emojiPos==0] <- tmpData$emojiTime[tmpData$emojiPos==0]
data.difficulty$firstTime <- 0
data.difficulty$firstTime[data.difficulty$emojiPos==0] <- data.difficulty$emojiTime[data.difficulty$emojiPos==0]
data.difficulty$firstTime[data.difficulty$twoWordPos==0] <- data.difficulty$emojiTime[data.difficulty$twoWordPos==0]
data.difficulty$firstTime[data.difficulty$threeClassPos==0] <- data.difficulty$emojiTime[data.difficulty$threeClassPos==0]
rm(tmpData)
rm(firstTaskData)
responsesGaussian <- list("emojiDif","twoWordDif","threeClassDif","meanTime","firstTime");
predictors <- list("Openness","Conscientiousness","Extraversion","Agreeableness","Neuroticism")
controls <- list("Age","Gender","IT") # important: start with a continuous variable, age is fine right now.
autoModelsUsability <- lapply(responsesGaussian,
getGAM,
predictors=predictors,
controls=controls,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 5,
method="REML"
)
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM)
source('../../plotGAM.R')
lapply(autoModelsUsability_simple, generatePDF,
controlVariables = controls, predictors = predictors,
prefix.predictors="predictors-", prefix.control="controls-",path="graphs/auto",xLab.predictors = "Trait Scores")
for(i in autoModelsUsability_simple){
outputSummary(i,prefix="auto-",path="summaries")
}
responsesGaussian <- list("emojiDif","twoWordDif","threeClassDif","meanTime","firstTime");
predictors <- list("Openness","Conscientiousness","Extraversion","Agreeableness","Neuroticism")
controls <- list("Age","Gender","IT") # important: start with a continuous variable, age is fine right now.
autoModelsUsability <- lapply(responsesGaussian,
getGAM,
predictors=predictors,
controls=controls,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 10,
method="GCV"
)
autoModelsUsability <- lapply(responsesGaussian,
getGAM,
predictors=predictors,
controls=controls,
controls.smoothed = list("Age"),
d <- data.difficulty,
k = 10
)
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM)
source('../../plotGAM.R')
lapply(autoModelsUsability_simple, generatePDF,
controlVariables = controls, predictors = predictors,
prefix.predictors="predictors-", prefix.control="controls-",path="graphs/auto/GCV",xLab.predictors = "Trait Scores")
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM,k=10, method="GCV")
summary(autoModelsUsability[[1]])
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM,k=10, method="GACV")
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM,k=10, method="Cp")
autoModelsUsability_simple <- lapply(autoModelsUsability, simplifyGAM,k=10, method="GCV.Cp")
lapply(autoModelsUsability_simple, generatePDF,
controlVariables = controls, predictors = predictors,
prefix.predictors="predictors-", prefix.control="controls-",path="graphs/auto/GCV",xLab.predictors = "Trait Scores")
emojiDifficulty <- gam(emojiDif ~ s(Age) + Gender + IT + s(Extraversion) + s(Agreeableness) +
s(Conscientiousness) + s(Neuroticism) + s(Openness) + emojiPos,
data = data.difficulty)
emojiDifficulty <- gam(emojiDif ~ s(Age) + Gender + IT + s(Extraversion) + s(Agreeableness) +
s(Conscientiousness) + s(Neuroticism) + s(Openness) + emojiPos,
data = data.difficulty,method = "REML")
generatePDF(emojiDifficulty,controlVariables = list("Age","Gender","IT","emojiPos"), predictors = predictors, yLab = "Difficulty to create emoji password", xLab.predictors = "Trait Scores")
generatePDF(emojiDifficulty,controlVariables = list("Age","Gender","IT","emojiPos"), predictors = predictors, xLab.predictors = "Trait Scores")
