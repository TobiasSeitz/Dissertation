
Family: gaussian 
Link function: identity 

Formula:
C_Strength ~ D_Age + SeBIS_Securement + SeBIS_Awareness + SeBIS_Updating + 
    SeBIS_Passwords + D_Gender + D_ComputerScienceBackground

Parametric coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
(Intercept)                    28.09054    3.60809   7.785    1e-11 ***
D_Age                          -0.01226    0.04381  -0.280   0.7803    
SeBIS_Securement               -0.02869    0.08369  -0.343   0.7325    
SeBIS_Awareness                 0.14107    0.12686   1.112   0.2690    
SeBIS_Updating                 -0.35372    0.15927  -2.221   0.0288 *  
SeBIS_Passwords                 0.27955    0.19463   1.436   0.1543    
D_GenderFemale                  0.06213    0.78404   0.079   0.9370    
D_ComputerScienceBackgroundYes  1.96748    0.82604   2.382   0.0193 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1


R-sq.(adj) =  0.0813   Deviance explained = 14.6%
GCV = 12.991  Scale est. = 11.952    n = 100
[1] "\nGAM.CHECK:"

Method: GCV   Optimizer: magic
Model required no smoothing parameter selectionModel rank =  8 / 8 

NULL
[1] "\nAUTOCORRELATION"
[1] "\nCONCURVITY"
Called from: concurvity(m, full = TRUE)

The downloaded binary packages are in
	/var/folders/4f/22cpl_91493gn_tqpzqgc2b00000gp/T//RtmpAm5200/downloaded_packages
Called from: gam(autoFormula, data = d)
Called from: gam(autoFormula, data = d)

> ### util
> 
> #library(extrafont)
> library(mgcv)

> library(ggplot2)

> # this can take a while, so we don't do that by default.
> # font_import()
> # fonts()
> # fonttable()
> # loadfonts()
> 
> renameColumn <- function .... [TRUNCATED] 

> # if we use a smoothening functin in a formula, we need to strip that from the column name later
> # to get the original variable name. 
> extractPa .... [TRUNCATED] 

> # This function helps avoiding smooth terms where linear modeling is possible.
> # It checks a given model for estimated degrees of freedom (edf).
> .... [TRUNCATED] 

> # https://stackoverflow.com/a/30265548/1447479 
> # creates a GAM with hardcoded control variables. Smoothes D_Age
> getSmoothedGAM <- function(colu .... [TRUNCATED] 

> ## creates a directory if it does not exist, saves the plot and embeds the fonts (that's a TODO)
> ## defaults to PDF!
> savePlot <- function(plot,f .... [TRUNCATED] 

> ## dependency on plotGAM.R!
> generatePDF <- function(model, 
+                         controlVariables,
+                         predictors,
+    .... [TRUNCATED] 

> # creates a text file with the summary.
> outputSummary <- function(m,prefix="",path=NULL){
+   # create a directory if it does not exist
+   if(!is .... [TRUNCATED] 
Called from: eval(expr, envir, enclos)
debug at ~/Dissertation/statistics/util.R#88: m <- gam(autoFormula, data = d)
G_Overall ~ s(D_Age) + D_Gender + D_ComputerScienceBackground + 
    s(B5_Extraversion) + s(B5_Agreeableness) + s(B5_Conscientiousness) + 
    s(B5_Neuroticism) + s(B5_Openness) + s(GDMS_Rational) + s(GDMS_Intuitive) + 
    s(GDMS_Avoidant) + s(GDMS_Dependent) + s(GDMS_Spontaneous)
<environment: 0x10b94de78>
G_Overall ~ s(D_Age) + D_Gender + D_ComputerScienceBackground + 
    s(B5_Extraversion) + s(B5_Agreeableness) + s(B5_Conscientiousness) + 
    s(B5_Neuroticism) + s(B5_Openness) + s(GDMS_Rational) + s(GDMS_Intuitive) + 
    s(GDMS_Avoidant) + s(GDMS_Dependent) + s(GDMS_Spontaneous)
<environment: 0x10b94de78>
[1] "~"                                                                                                                                                                                                                                                              
[2] "G_Overall"                                                                                                                                                                                                                                                      
[3] "s(D_Age) + D_Gender + D_ComputerScienceBackground + s(B5_Extraversion) + s(B5_Agreeableness) + s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness) + s(GDMS_Rational) + s(GDMS_Intuitive) + s(GDMS_Avoidant) + s(GDMS_Dependent) + s(GDMS_Spontaneous)"
Called from: eval(expr, envir, enclos)
debug at ~/Dissertation/statistics/util.R#88: m <- gam(autoFormula, data = d)
[1] "s(D_Age) + D_Gender + D_ComputerScienceBackground+s(B5_Extraversion)+s(B5_Agreeableness)+s(B5_Conscientiousness)+s(B5_Neuroticism)+s(B5_Openness)+s(GDMS_Rational)+s(GDMS_Intuitive)+s(GDMS_Avoidant)+s(GDMS_Dependent)+s(GDMS_Spontaneous)"
Called from: gam(autoFormula, data = d)
Called from: eval(expr, envir, enclos)
debug at ~/Dissertation/statistics/util.R#88: m <- gam(autoFormula, data = d)
Called from: eval(expr, envir, enclos)
debug at ~/Dissertation/statistics/util.R#88: m <- gam(autoFormula, data = d)
Called from: eval(expr, envir, enclos)
debug at ~/Dissertation/statistics/util.R#88: m <- gam(autoFormula, data = d)
Called from: match(x, table, nomatch = 0L)
[[1]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Overall.pdf"

[[2]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Common.pdf"

[[3]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Passphrase.pdf"

[[4]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Pattern.pdf"

[[5]]
[1] "Saved plot to graphs/all/rating-all-controls-G_LengthLong.pdf"

[[6]]
[1] "Saved plot to graphs/all/rating-all-controls-G_LengthShort.pdf"

[[7]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Weak.pdf"

[[8]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Medium.pdf"

[[9]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Strong.pdf"

[[10]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Digits.pdf"

[[11]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Special.pdf"

[[12]]
[1] "Saved plot to graphs/all/rating-all-controls-G_Uppercase.pdf"


> ### util
> 
> #library(extrafont)
> library(mgcv)

> library(ggplot2)

> # this can take a while, so we don't do that by default.
> # font_import()
> # fonts()
> # fonttable()
> # loadfonts()
> 
> renameColumn <- function .... [TRUNCATED] 

> # if we use a smoothening functin in a formula, we need to strip that from the column name later
> # to get the original variable name. 
> extractPa .... [TRUNCATED] 

> # This function helps avoiding smooth terms where linear modeling is possible.
> # It checks a given model for estimated degrees of freedom (edf).
> .... [TRUNCATED] 

> # https://stackoverflow.com/a/30265548/1447479 
> # creates a GAM with hardcoded control variables. Smoothes D_Age
> getSmoothedGAM <- function(colu .... [TRUNCATED] 

> ## creates a directory if it does not exist, saves the plot and embeds the fonts (that's a TODO)
> ## defaults to PDF!
> savePlot <- function(plot,f .... [TRUNCATED] 

> ## dependency on plotGAM.R!
> generatePDF <- function(model, 
+                         controlVariables,
+                         predictors,
+    .... [TRUNCATED] 

> # creates a text file with the summary.
> outputSummary <- function(m,prefix="",path=NULL){
+   # create a directory if it does not exist
+   if(!is .... [TRUNCATED] 
