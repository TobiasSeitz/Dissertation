predictorsSeBIS <- list("SeBIS_Securement","SeBIS_Awareness", "SeBIS_Updating", "SeBIS_Passwords")
predictorsGDMS <- list("GDMS_Rational","GDMS_Intuitive", "GDMS_Avoidant",  "GDMS_Dependent", "GDMS_Spontaneous")
autoModelsRating <- lapply(responseVariablesRating,function(column, d){
autoFormula <- as.formula(paste(column,"~ s(D_Age) + D_Gender + D_ComputerScienceBackground + s(B5_Extraversion) + s(B5_Agreeableness) +
s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness)"))
gam(autoFormula, data=d);
#autoGamPlots <- plotGAM(autoGam, controlVariables = controlVariables, predictors = predictorsB5, yLab=column, xLab.predictors = "Trait Score")
#autoFileNameB5 <- paste("rating-",column,"-b5.pdf",sep="")
#autoFileNameControl <- paste("rating-",column,"-control.pdf",sep="")
#savePlot(autoGamPlots[[1]],autoFileNameB5,path="graphs")
#savePlot(autoGamPlots[[2]],autoFileNameControl,path="graphs")
}, data=d100)
autoModelsRating <- lapply(responseVariablesRating,function(column){
autoFormula <- as.formula(paste(column,"~ s(D_Age) + D_Gender + D_ComputerScienceBackground + s(B5_Extraversion) + s(B5_Agreeableness) +
s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness)"))
gam(autoFormula, data=d100);
#autoGamPlots <- plotGAM(autoGam, controlVariables = controlVariables, predictors = predictorsB5, yLab=column, xLab.predictors = "Trait Score")
#autoFileNameB5 <- paste("rating-",column,"-b5.pdf",sep="")
#autoFileNameControl <- paste("rating-",column,"-control.pdf",sep="")
#savePlot(autoGamPlots[[1]],autoFileNameB5,path="graphs")
#savePlot(autoGamPlots[[2]],autoFileNameControl,path="graphs")
})
summary(autoModelsRating)
lapply(autoModelsRating, function(model){
# the first variable of the formula is the dependent variable.
sinkFilename <- paste("out/rating-",all.vars(model$formula)[1],".txt",sep="");
sink(sinkFilename)
summary(model)
})
sink()
autoModelsRating
summary(autoModelsRating)
dev.off()
1+1
sink()
1+1
asdf
lapply(autoModelsRating, function(model){
# the first variable of the formula is the dependent variable.
sinkFilename <- paste("out/rating-",all.vars(model$formula)[1],".txt",sep="");
sink(sinkFilename)
summary(model)
sink()
})
sink.number()
sink(file=NULL)
1ÃŸ1
101
### STANDALONE STRENGTH RATING
library(mgcv)
library(ggplot2)
library(plyr)
library(texreg)
library(lme4)
library(reshape2)
library(visreg)
source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
# read data from 100, cleaned dataset, preprocessed from excel.
d100 <- read.csv("dataset-N100.csv", sep = ";", dec = ".")
### factorize things
d100$D_Gender <- factor(d100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d100$D_ComputerScienceBackground <- factor(d100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
responseVariablesRating <- c("G_Common","G_Passphrase","G_Pattern",
"G_LengthLong","G_LengthShort",
"G_Weak","G_Medium","G_Strong",
"G_Digits","G_Special","G_Uppercase")
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
predictorsB5 <- list("B5_Extraversion","B5_Agreeableness", "B5_Conscientiousness", "B5_Neuroticism", "B5_Openness")
predictorsSeBIS <- list("SeBIS_Securement","SeBIS_Awareness", "SeBIS_Updating", "SeBIS_Passwords")
predictorsGDMS <- list("GDMS_Rational","GDMS_Intuitive", "GDMS_Avoidant",  "GDMS_Dependent", "GDMS_Spontaneous")
autoModelsRating <- lapply(responseVariablesRating,function(column){
autoFormula <- as.formula(paste(column,"~ s(D_Age) + D_Gender + D_ComputerScienceBackground + s(B5_Extraversion) + s(B5_Agreeableness) +
s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness)"))
gam(autoFormula, data=d100);
#autoGamPlots <- plotGAM(autoGam, controlVariables = controlVariables, predictors = predictorsB5, yLab=column, xLab.predictors = "Trait Score")
#autoFileNameB5 <- paste("rating-",column,"-b5.pdf",sep="")
#autoFileNameControl <- paste("rating-",column,"-control.pdf",sep="")
#savePlot(autoGamPlots[[1]],autoFileNameB5,path="graphs")
#savePlot(autoGamPlots[[2]],autoFileNameControl,path="graphs")
})
autoModelsRating
summary(autoModelsRating[[11]])
page(lapply(autoModelsRating, summary), method="print")
page(lapply(autoModelsRating, function(model){
summary(model)
}), method="print")
page(lapply(autoModelsRating, function(model){
all.vars(model$formula)[1]
summary(model)
}), method="print")
page(lapply(autoModelsRating, function(model){
print(all.vars(model$formula)[1])
summary(model)
}), method="print")
page(lapply(autoModelsRating, function(model){
paste(all.vars(model$formula)[1],summary(model))
}), method="print")
lapply(autoModelsRating, function(model){
summary(model)
})
plotreg(
autoModelsRating,
responseVariablesRating,
file="graphs/plotreg-models-.pdf"
)
testModel <- autoModelsRating[[1]]
testModel
testModel$coefficients
testModel$linear.predictors
testModel$family
testModel$edf
testModel$edf1
typeof(summary(testModel))
testList <- summary(testModel)
testList$s.table
testList$chi.sq
as.data.frame(testList$s.table)
testList$s.table[testList$s.table$ef == 1,]
testFrame  <- as.data.frame(testList$s.table)
testFrame[testFrame$ef == 1,]
testFrame[testFrame$edf == 1,]
testFrame[,testFrame$edf == 1]
testFrame[testFrame$edf == 1.0,]
View(testFrame)
testFrame[testFrame$edf < 1.5,]
testFrame[testFrame$edf < 1.1,]
rownames(testFrame[testFrame$edf < 1.1,])
rownames(testFrame[testFrame$edf < 1.1,])[1]
rownames(testFrame[testFrame$edf <= 1,])[1]
rownames(testFrame[testFrame$edf = 1,])[1]
rownames(testFrame[testFrame$edf <= 1.1,])[1]
rownames(testFrame[testFrame$edf <= 1.1,])[2]
lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
print(mLinearRows)
})
rownames(testFrame[testFrame$edf > 1,])
rownames(testFrame[testFrame$edf > 1.0,])
rownames(testFrame[testFrame$edf > 1.1,])
source('~/Dissertation/statistics/plotGAM.R')
grepl("s\(.\)","s(D_Age)")
grepl("s\\(.\)","s(D_Age)")
grepl("s(.)","s(D_Age)")
grepl("s(.)","sD_Age)")
grepl("s(.+)","sD_Age)")
grepl("s(.+)","sD_Age)")
gsub("s(","","s(D_Age)")
gsub("s\\(","","s(D_Age)")
gsub("\\)","",gsub("s\\(","","s(D_Age)"))
extractParameterFromSmoother <- function(x){gsub("\\)","",gsub("s\\(","",x))}
lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
mCurvePredictors <- lapply(mCurveRows, extractParameterFromSmoother)
print(mLinearPredictors)
})
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormula = as.formula(
paste(paste(mResponse,"~ "),mLinearPredictors,mCurveRows,sep=" + ")
)
nFormula
})
testList$pTerms.pv
testList$p.table
as.data.frame(testList$p.table)[2,]
as.data.frame(testList$p.table)[1,]
as.data.frame(testList$p.table)[2:,]
as.data.frame(testList$p.table)[2:n,]
as.data.frame(testList$p.table)[2:-1,]
as.data.frame(testList$p.table)[2:2,]
as.data.frame(testList$p.table)[2:3,]
lenght(as.data.frame(testList$p.table)
q
length(as.data.frame(testList$p.table))
as.data.frame(testList$p.table)[2:length(as.data.frame(testList$p.table)),]
as.data.frame(testList$p.table)[2:length(as.data.frame(testList$p.table))-1,]
testFrame <- as.data.frame(testList$p.table)
testFrame[2:length(testFrame-1,]
testFrame[2:length(testFrame)-1,]
testFrame[length(testFrame)-1,]
testFrame[1:length(testFrame)-1,]
testFrame[3:length(testFrame)-1,]
testFrame[0:length(testFrame)-1,]
testFrame[2:dim(testFrame)-1,]
nrow(testFrame)
testFrame[2:nrow(testFrame),]
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$p.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame[2:nrow(mParametricFrame),])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(paste(mResponse,"~ "),mParametricRow,mLinearPredictors,mCurveRows, sep=" + ",collapse = TRUE)
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$p.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame[2:nrow(mParametricFrame),])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(paste(mResponse,"~ "),mParametricRows,mLinearPredictors,mCurveRows, sep=" + ",collapse = TRUE)
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$p.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame[2:nrow(mParametricFrame),])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(paste(mResponse,"~"),mParametricRows,mLinearPredictors,mCurveRows, sep=" + ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$p.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame[2:nrow(mParametricFrame),])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(mParametricRows,mLinearPredictors,mCurveRows, sep=" + ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$p.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame[2:nrow(mParametricFrame),])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(mParametricRows,mLinearPredictors,mCurveRows, sep=" + ")
nFormulaString <- paste(mResponse,nFormulaString,sep=" ~ ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
testList$pTerms.table
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$pTerms.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame[2:nrow(mParametricFrame),])
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(mParametricRows,mLinearPredictors,mCurveRows, sep=" + ")
nFormulaString <- paste(mResponse,nFormulaString,sep=" ~ ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
updatedFormulae <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$pTerms.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame)
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- lapply(mLinearRows, extractParameterFromSmoother)
nFormulaString <- paste(mParametricRows,mLinearPredictors,mCurveRows, sep=" + ")
nFormulaString <- paste(mResponse,nFormulaString,sep=" ~ ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
nFormula
})
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
View(mParametricFrame)
paste(mParametricRows,mLinearPredictors,mCurveRows, sep=" + ")
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
vapply(mLinearRows, extractParameterFromSmoother)
sapply(mLinearRows, extractParameterFromSmoother)
typeof(sapply(mLinearRows, extractParameterFromSmoother))
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
c(mParametricRows,mLinearPredictors)
c(mParametricRows,mCurveRows)
c(mParametricRows,mCurveRows,lapply(mLinearRows, extractParameterFromSmoother))
c(mParametricRows,mCurveRows,apply(mLinearRows, extractParameterFromSmoother))
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
c(mParametricRows, mLinearPredictors,mCurveRows)
c(mParametricRows, mCurveRows)
mLinearPredictors
mLinearRows
unlist(mLinearPredictors)
unlist(mLinearPredictors[1,])
unlist(mLinearPredictors[,1])
dim(mLinearPredictors)
unname(mLinearPredictors)
mLinearPredictors <- unname(mLinearPredictors)
c(mParametricRows, mLinearPredictors,mCurveRows)
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
debugSource('~/Dissertation/statistics/personality/study-02/tmp.R', echo=TRUE)
updatedModels <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$pTerms.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame)
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- sapply(mLinearRows, extractParameterFromSmoother)
mLinearPredictors <- unname(mLinearPredictors) # for some reason the name persists...
nRightHand <- c(mParametricRows, mLinearPredictors,mCurveRows)
nFormulaString <- paste(nRightHand, collapse=" + ")
nFormulaString <- paste(mResponse,nFormulaString,sep=" ~ ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
gam(nFormula,data=d100)
})
Q
lapply(updatedModels, function(model){
column <- all.vars(model$formula)[1]
autoGamPlots <- plotGAM(model, controlVariables = controlVariables, predictors = predictorsB5, yLab=column, xLab.predictors = "Trait Score")
autoFileNameB5 <- paste("rating-",column,"-b5.pdf",sep="")
autoFileNameControl <- paste("rating-",column,"-control.pdf",sep="")
savePlot(autoGamPlots[[1]],autoFileNameB5,path="graphs/updated")
savePlot(autoGamPlots[[2]],autoFileNameControl,path="graphs/updated")
})
updatedModels <- lapply(autoModelsRating, function(model){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$pTerms.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame)
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- sapply(mLinearRows, extractParameterFromSmoother)
mLinearPredictors <- unname(mLinearPredictors) # for some reason the name persists...
nRightHand <- c(mParametricRows, mLinearPredictors,mCurveRows)
nFormulaString <- paste(nRightHand, collapse=" + ")
nFormulaString <- paste(mResponse,nFormulaString,sep=" ~ ")
print(nFormulaString)
nFormula = as.formula(nFormulaString)
gam(nFormula,data=d100)
})
lapply(updatedModels, function(model){
column <- all.vars(model$formula)[1]
autoGamPlots <- plotGAM(model, controlVariables = controlVariables, predictors = predictorsB5, yLab=column, xLab.predictors = "Trait Score")
autoFileNameB5 <- paste("rating-",column,"-b5.pdf",sep="")
autoFileNameControl <- paste("rating-",column,"-control.pdf",sep="")
savePlot(autoGamPlots[[1]],autoFileNameB5,path="graphs/updated")
savePlot(autoGamPlots[[2]],autoFileNameControl,path="graphs/updated")
})
lapply(updatedModels,summary)
plotreg(updatedModels,custom.model.names = responseVariablesRating, file="graphs/plotreg-rating-updated-models.pdf")
simplifyGAM <- function(model,d){
mSummary <- summary(model) # gives us everything we need.
mSmoothedFrame <- as.data.frame(mSummary$s.table);
mParametricFrame <- as.data.frame(mSummary$pTerms.table);
mResponse <- all.vars(model$formula)[1]
mLinearRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf <= 1.1,])
mParametricRows <- rownames(mParametricFrame)
mCurveRows <- rownames(mSmoothedFrame[mSmoothedFrame$edf > 1.1,])
mLinearPredictors <- sapply(mLinearRows, extractParameterFromSmoother)
mLinearPredictors <- unname(mLinearPredictors) # for some reason the name persists...
nRightHand <- c(mParametricRows, mLinearPredictors,mCurveRows)
nFormulaString <- paste(nRightHand, collapse=" + ")
nFormulaString <- paste(mResponse,nFormulaString,sep=" ~ ")
nFormula = as.formula(nFormulaString)
gam(nFormula,data=d)
}
updatedModels <- lapply(autoModelsRating, simplifyGAM,d=data100);
updatedModels <- lapply(autoModelsRating, simplifyGAM,d=d100);
source("../../util.R");
updatedModels
updatedModels <- lapply(autoModelsRating, simplifyGAM,d=d100);
updatedModels
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d=d100)
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- paste(lapply(predictors,function(p){
paste0("s(",p,")")
}), collapse= " + ")
rightHand <- paste(controls, smoothedPredictors, collapse = " + ");
autoFormula <- as.formula(paste(column,rightHand,sep = " ~ "))
gam(autoFormula, data=d);
}
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d=d100)
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
print(smoothedPredictors);
concatPredictors = paste(smoothedPredictors,collapse = " + ")
rightHand <- paste(controls, smoothedPredictors, collapse = " + ");
autoFormula <- as.formula(paste(column,rightHand,sep = " ~ "))
gam(autoFormula, data=d);
}
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d=d100)
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
print(smoothedPredictors);
concatPredictors = paste(smoothedPredictors,collapse = " + ")
rightHand <- paste(controls, smoothedPredictors, collapse = " + ");
autoFormula <- as.formula(paste(column,rightHand,sep = " ~ "))
gam(autoFormula, data=d);
}
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d=d100)
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
print(smoothedPredictors);
concatPredictors = paste(smoothedPredictors,collapse = " + ")
rightHand <- paste(controls, concatPredictors, sep = " + ");
autoFormula <- as.formula(paste(column,rightHand,sep = " ~ "))
gam(autoFormula, data=d);
}
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d=d100)
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictors5,d=d100)
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d=d100)
updatedModels <- lapply(autoModelsRatingB5, simplifyGAM,d=d100);
rm(updatedModels)
autoModelsRatingGDMS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsGDMS,d=d100)
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
concatPredictors = paste(smoothedPredictors,collapse = " + ")
rightHand <- paste(controls, concatPredictors, sep = " + ");
autoFormula <- as.formula(paste(column,rightHand,sep = " ~ "))
gam(autoFormula, data=d);
}
rm(updatedModels)
rm(updatedFormulae)
rm(testList)
rm(testModel)
rm(testFrame)
rm(autoModelsRating)
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM,d=d100);
lapply(updatedModelsB5, function(model){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors="Trait Score")
savePlot(autoPlots[[1]],paste0("rating-b5-",dependent,".pdf"),path="graphs/updated")
savePlot(autoPlots[[2]],paste0("rating-b5control-",dependent,".pdf"),path="graphs/updated")
})
lapply(updatedModelsB5, function(model){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(model,controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors="Trait Score")
savePlot(autoPlots[[1]],paste0("rating-b5-",dependent,".pdf"),path="graphs/updated")
savePlot(autoPlots[[2]],paste0("rating-b5control-",dependent,".pdf"),path="graphs/updated")
})
lapply(autoModelsRatingB5, function(model){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(model,controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors="Trait Score")
savePlot(autoPlots[[1]],paste0("rating-b5-",dependent,".pdf"),path="graphs/updated")
savePlot(autoPlots[[2]],paste0("rating-b5control-",dependent,".pdf"),path="graphs/updated")
})
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
concatPredictors = paste(smoothedPredictors,collapse = " + ")
rightHand <- paste(controls, concatPredictors, sep = " + ");
autoFormula <- as.formula(paste(column,rightHand,sep = " ~ "))
gam(autoFormula, data=d);
}
testmodel <- getSmoothedGAM("G_Overall",predictorsB5,d100);
testplots <- plotGAM(testmodel,controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors="Trait Score")
testmodel$fit
testmodel$fit$data
plot(testmodel, pages = 1, jit=TRUE)
plot(testmodel, pages = 1, jit=TRUE)
plotreg(testmodel)
debugSource('~/Dissertation/statistics/plotGAM.R')
source("../../plotGAM.R");
testplots <- plotGAM(testmodel,controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors="Trait Score")
