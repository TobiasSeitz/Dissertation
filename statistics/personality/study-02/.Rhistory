#guides(colour = guide_legend(reverse=T)) +
labs(y="Rating",x="Password",col="Passwords")
)
savePlot(boxPlotRatings,filename="boxplot-ratings-pws-v2.pdf",width=10,height=3,path="graphs")
savePlot(boxPlotRatings,filename="boxplot-ratings-pws-v2.pdf",width=10,height=4,path="graphs")
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=TRUE)
pwAnalysis <- read.csv("pw-analysis.csv", sep = ",", dec = ".")
pwAnalysis <- pwAnalysis[,1:12] # we only need the first 12 columns
idVars <- c(
"X...subject",
"D_Gender",
"D_Age",
"D_ComputerScienceBackground",
"B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism"
)
measureVars <- names(d[!names(d) %in% idVars])
source("../../plotGAM.R");
source("../../util.R");
d100 <- read.csv("dataset-N100-small.csv", sep = ";", dec = ".")
b5Items <- read.csv("b5-items.csv", sep = ";", dec = ".")
d100$D_Gender <- factor(d100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d100$D_ComputerScienceBackground <- factor(d100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
predictorsB5 <- list("B5_Extraversion","B5_Agreeableness", "B5_Conscientiousness", "B5_Neuroticism", "B5_Openness")
View(d100)
View(d)
View(pwAnalysis)
library(mgcv)
library(plyr)
library(reshape2)
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=TRUE)
pwAnalysis <- read.csv("pw-analysis.csv", sep = ",", dec = ".")
pwAnalysis <- pwAnalysis[,1:12] # we only need the first 12 columns
idVars <- c(
"X...subject",
"D_Gender",
"D_Age",
"D_ComputerScienceBackground",
"B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism"
)
measureVars <- names(d[!names(d) %in% idVars])
dLong <- melt(d, id.vars = , measure.vars = measureVars)
dLong <- rename(dLong, c("variable"="password","value"="rating")) # requires plyr
dLong$password <- as.character(dLong$password)
dLong$password[dLong$password=="X.thedzfhg123"] = "thedzfhg123"
dLong$password[dLong$password=="X11Nd1sPPut8ble99"] = "11Nd1sPPut8ble99"
dLong$password[dLong$password=="F.m1Ly07."] = "F@m1Ly07%"
dLong$password[dLong$password=="bicycles.peaches.cold"] = "bicycles-peaches-cold"
dLong$password[dLong$password=="ocean4.Size..beer.Car"] = "ocean4 Size !beer Car"
dLong$password[dLong$password=="AatIcs.ijayl.t"] = "AatIcs,ijayl-t"
dLong$password[dLong$password=="X1qaz2wsx3edc"] = "1qaz2wsx3edc"
dLong$password[dLong$password=="p.ssw0rd"] = "p@ssw0rd"
dLong$password <- factor(dLong$password)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=rating,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
#coord_flip() +
#guides(colour = guide_legend(reverse=T)) +
labs(y="Rating",x="Password",col="Passwords")
)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=rating,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
#coord_flip() +
#guides(colour = guide_legend(reverse=T)) +
labs(y="Subjective Rating",x="Password",col="Passwords")
)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=rating,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
#coord_flip() +
#guides(colour = guide_legend(reverse=T)) +
labs(y="Perceived Strength",x="Password",col="Passwords")
)
savePlot(boxPlotRatings,filename="boxplot-ratings-pws-v3.pdf",width=10,height=4,path="graphs")
merged <- merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
predictorsB5 <- list(  "B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism")
predictorsFeatures <- list("digits","symbols","uppercase","lowercase");
anova(featuresModel_simple,manualMixedGam, test="F")
predictorString <- paste(predictorsMixedModel,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
featuresModel_simple <- simplifyGAM(featuresModel)
summary(featuresModel)
summary(featuresModel_simple)
#summary(lm(autoFormula,data=merged))
outputSummary(featuresModel_simple,prefix="rating-simple-b5-", path="summaries/mixed")
plot(featuresModel_simple,jit=TRUE,pages=1)
mixedModelPlot <- plotGAM(featuresModel_simple,predictors=predictorsMixedGraph)
mixedModelPlot <- plotGAM(featuresModel, predictors=predictorsFeatures,controlVariables = predictorsB5)
savePlot(mixedModelPlot[[1]],filename="rating-mixed-v1-predictors.pdf",path="graphs/mixed")
savePlot(mixedModelPlot[[2]],filename="rating-mixed-v1-b5.pdf",path="graphs/mixed")
#savePlot(boxPlotRatings[[2]],filename="rating-mixed-control.pdf",path="graphs/mixed")
mixedModelPlot[[1]]
#################################################################### manual gam
# manual simple gam
####################################################################
simpleFeaturesGam <- gam(rating ~ lowercase + uppercase + substitutions, method="REML",data=merged)
summary(simpleFeaturesGam)
outputSummary(simpleFeaturesGam,prefix="simple-",path="summaries/mixed")
manualSimplePlot <- plotGAM(simpleFeaturesGam,predictors=list("digits","length","lowercase","symbols","uppercase"),
xLab.predictors = "Feature Count",
yLab = "Password Rating",
plotResiduals = FALSE
)
savePlot(manualSimplePlot[[1]],filename="rating-manual-simple.pdf",path="graphs/mixed")
gamtabs(simpleFeaturesGam)
# manual mixed gam
####################################################################
manualMixedGam <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) + (digits*substitutions*symbols)
#                        s(B5_Openness,k=7) +
#                        B5_Agreeableness +
#                        s(B5_Neuroticism,k=9)
, method="REML", data = merged)
summary(manualMixedGam)
outputSummary(manualMixedGam,prefix="08-",path="summaries/mixed")
manualMixedPlot <- plotGAM(manualMixedGam,predictors=list("digits","length","lowercase","symbols","uppercase","chunks","substitutions","score"),
controlVariables = predictorsB5,
xLab.predictors = "Feature Count",
xLab.control = "Big Five Trait Scores",
yLab = "Password Rating",
plotResiduals = FALSE
)
savePlot(manualMixedPlot[[1]],filename="rating-manual-mixed-v8-predictors.pdf",path="graphs/mixed")
savePlot(manualMixedPlot[[2]],filename="rating-manual-mixed-v8-b5.pdf",path="graphs/mixed")
manualMixedPlot[[1]]
manualMixedPlot[[2]]
mergedNoLeet <- merged[merged$password!='F@m1Ly07%' & merged$password!='p@ssw0rd',]
manualMixedGam_noLeet <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) +
s(B5_Openness,k=7) +
B5_Agreeableness +
s(B5_Neuroticism,k=9)
, method="REML", data = mergedNoLeet)
summary(manualMixedGam_noLeet)
outputSummary(manualMixedGam,prefix="06-noLeet-",path="summaries/mixed")
## compare fits
AIC(featuresModel,featuresModel_simple,simpleFeaturesGam, manualMixedGam)
featuresModel <- gam(autoFormula, data=merged, method="REML")
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
predictorString <- paste(predictorsMixedModel,collapse = "+");
predictorsMixedModel <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=10))
predictorsMixedGraph <- c(predictorsFeatures,predictorsB5)
predictorString <- paste(predictorsMixedModel,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
featuresModel_simple <- simplifyGAM(featuresModel)
summary(featuresModel)
summary(featuresModel_simple)
outputSummary(featuresModel_simple,prefix="rating-simple-b5-", path="summaries/mixed")
plot(featuresModel_simple,jit=TRUE,pages=1)
mixedModelPlot <- plotGAM(featuresModel_simple,predictors=predictorsMixedGraph)
mixedModelPlot <- plotGAM(featuresModel, predictors=predictorsFeatures,controlVariables = predictorsB5)
mixedModelPlot[[1]]
savePlot(mixedModelPlot[[1]],filename="rating-mixed-v2-predictors.pdf",path="graphs/mixed")
savePlot(mixedModelPlot[[2]],filename="rating-mixed-v2-b5.pdf",path="graphs/mixed")
mixedModelPlot[[1]]
manualMixedGam <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) + (digits*substitutions*symbols)
#                        s(B5_Openness,k=7) +
#                        B5_Agreeableness +
#                        s(B5_Neuroticism,k=9)
, method="REML", data = merged)
summary(manualMixedGam)
outputSummary(manualMixedGam,prefix="08-",path="summaries/mixed")
manualMixedPlot <- plotGAM(manualMixedGam,predictors=list("digits","length","lowercase","symbols","uppercase","chunks","substitutions","score"),
controlVariables = predictorsB5,
xLab.predictors = "Feature Count",
xLab.control = "Big Five Trait Scores",
yLab = "Password Rating",
plotResiduals = FALSE
)
savePlot(manualMixedPlot[[1]],filename="rating-manual-mixed-v9-predictors.pdf",path="graphs/mixed")
savePlot(manualMixedPlot[[2]],filename="rating-manual-mixed-v9-b5.pdf",path="graphs/mixed")
manualMixedPlot[[1]]
manualMixedPlot[[2]]
manualMixedGam <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) + (digits*substitutions*symbols)
s(B5_Openness,k=7) +
B5_Agreeableness +
s(B5_Neuroticism,k=9)
, method="REML", data = merged)
manualMixedGam <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) + (digits*substitutions*symbols)
s(B5_Openness,k=7) +
B5_Agreeableness +
s(B5_Neuroticism,k=9),
method="REML", data = merged)
manualMixedGam <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) + (digits*substitutions*symbols) +
s(B5_Openness,k=7) +
B5_Agreeableness +
s(B5_Neuroticism,k=9),
method="REML", data = merged)
summary(manualMixedGam)
outputSummary(manualMixedGam,prefix="09-",path="summaries/mixed")
manualMixedPlot <- plotGAM(manualMixedGam,
predictors=list("digits","length","lowercase","symbols","uppercase","chunks","substitutions","score"),
controlVariables = predictorsB5,
xLab.predictors = "Feature Count",
xLab.control = "Big Five Trait Scores",
yLab = "Password Rating",
plotResiduals = FALSE
)
savePlot(manualMixedPlot[[1]],filename="rating-manual-mixed-v9-predictors.pdf",path="graphs/mixed")
savePlot(manualMixedPlot[[2]],filename="rating-manual-mixed-v9-b5.pdf",path="graphs/mixed")
manualMixedPlot[[1]]
manualMixedPlot[[2]]
manualMixedPlot <- plotGAM(manualMixedGam,
predictors=list("digits","length","lowercase","symbols","uppercase","chunks","substitutions","score"),
controlVariables = predictorsB5,
xLab.predictors = "Feature Count",
xLab.control = "Big Five Trait Scores",
yLab = "Password Rating",
plotResiduals = T
)
manualMixedPlot[[1]]
savePlot(manualMixedPlot[[1]],filename="rating-manual-mixed-v9-predictors.pdf",path="graphs/mixed")
savePlot(manualMixedPlot[[2]],filename="rating-manual-mixed-v9-b5.pdf",path="graphs/mixed")
View(d100)
predictorsMeta <- list("Meta_Length","Meta_Lowercase","Meta_Uppercase","Meta_Digits","Meta_Special");
autoModelsRatingMeta <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsMeta,d<-d100, select=FALSE,method="REML")
responseVariablesRating <- c("G_Overall", "G_Common","G_Passphrase","G_Pattern",
"G_LengthLong","G_LengthShort",
"G_Weak","G_Medium","G_Strong",
"G_Digits","G_Special","G_Uppercase")
d100 <- read.csv("dataset-N100-small.csv", sep = ";", dec = ".")
d100$D_Gender <- factor(d100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d100$D_ComputerScienceBackground <- factor(d100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
autoModelsRatingMeta <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsMeta,d<-d100, select=FALSE,method="REML")
autoModelsRatingMeta <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsMeta,d<-d100, select=FALSE,method="REML",k=3)
updatedModelsMeta <- lapply(autoModelsRatingMeta, simplifyGAM,method="REML")
lapply(updatedModelsMeta, generatePDF,
controlVariables = controlVariables,
predictors = predictorsMeta,
prefix.predictors="rating-meta-predictors-",
prefix.control="rating-meta-controls-",
path="graphs/meta-reml",
xLab.predictors = "Meta Password Statistics")
for(i in updatedModelsMeta){
outputSummary(i, path="summaries/meta")
}
d100 <- read.csv("dataset-N100-small.csv", sep = ";", dec = ".")
b5Items <- read.csv("b5-items.csv", sep = ";", dec = ".")
d100$D_Gender <- factor(d100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d100$D_ComputerScienceBackground <- factor(d100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
responseVariablesRating <- c("G_Overall", "G_Common","G_Passphrase","G_Pattern",
"G_LengthLong","G_LengthShort",
"G_Weak","G_Medium","G_Strong",
"G_Digits","G_Special","G_Uppercase")
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
predictorsB5 <- list("B5_Extraversion","B5_Agreeableness", "B5_Conscientiousness", "B5_Neuroticism", "B5_Openness")
predictorsSeBIS <- list("SeBIS_Securement","SeBIS_Awareness", "SeBIS_Updating", "SeBIS_Passwords")
predictorsGDMS <- list("GDMS_Rational","GDMS_Intuitive", "GDMS_Avoidant",  "GDMS_Dependent", "GDMS_Spontaneous")
responseFrame <- d100[,which(names(d100) %in% responseVariablesRating)]
b5Frame <- d100[,which(names(d100) %in% predictorsB5)]
gdmsFrame <- d100[,which(names(d100) %in% predictorsGDMS)]
sebisFrame <- d100[,which(names(d100) %in% predictorsSeBIS)]
pointsPerItem <- 7;
gOverall <- 13;
gCommon <- 3;
gPassphrase <- 2;
gPattern <- 3;
gLong <- 6;
gShort <- 7;
gWeak <- 3;
gMedium <- 4;
gStrong <- 5;
gDigits <- 8;
gSpecial <- 5;
gUppercase <- 5;
dNormed <- d100;
dNormed$G_Overall = dNormed$G_Overall / gOverall;
dNormed$G_Common = dNormed$G_Common / gCommon;
dNormed$G_Passphrase = dNormed$G_Passphrase / gPassphrase;
dNormed$G_Pattern = dNormed$G_Pattern / gPattern;
dNormed$G_LengthLong = dNormed$G_LengthLong / gLong;
dNormed$G_LengthShort = dNormed$G_LengthShort / gShort;
dNormed$G_Weak = dNormed$G_Weak / gWeak;
dNormed$G_Medium = dNormed$G_Medium / gMedium;
dNormed$G_Strong = dNormed$G_Strong / gStrong;
dNormed$G_Digits = dNormed$G_Digits / gDigits;
dNormed$G_Special = dNormed$G_Special / gSpecial;
dNormed$G_Uppercase = dNormed$G_Uppercase / gUppercase;
dResponseLongForm <- melt(dNormed, id.vars = "X...id", measure.vars = responseVariablesRating);
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels = c("Overall","Common","Passphrase","Pattern","Long","Short","Weak","Medium","Strong","Digits","Symbols","Uppercase")) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password Group")
)
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100, select=FALSE,method="REML")
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM,method="REML");
lapply(updatedModelsB5, generatePDF,
controlVariables = controlVariables, predictors = predictorsB5,
prefix.predictors="rating-b5-predictors-", prefix.control="rating-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries/reml")
}
#data transformation
library(mgcv)
library(plyr)
library(reshape2)
library(texreg)
library(itsadug)
#source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
# read data from 100, cleaned dataset, preprocessed from excel.
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=TRUE)
pwAnalysis <- read.csv("pw-analysis.csv", sep = ",", dec = ".")
pwAnalysis <- pwAnalysis[,1:12] # we only need the first 12 columns
idVars <- c(
"X...subject",
"D_Gender",
"D_Age",
"D_ComputerScienceBackground",
"B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism"
)
measureVars <- names(d[!names(d) %in% idVars])
dLong <- melt(d, id.vars = , measure.vars = measureVars)
dLong <- rename(dLong, c("variable"="password","value"="rating")) # requires plyr
dLong$password <- as.character(dLong$password)
dLong$password[dLong$password=="X.thedzfhg123"] = "thedzfhg123"
dLong$password[dLong$password=="X11Nd1sPPut8ble99"] = "11Nd1sPPut8ble99"
dLong$password[dLong$password=="F.m1Ly07."] = "F@m1Ly07%"
dLong$password[dLong$password=="bicycles.peaches.cold"] = "bicycles-peaches-cold"
dLong$password[dLong$password=="ocean4.Size..beer.Car"] = "ocean4 Size !beer Car"
dLong$password[dLong$password=="AatIcs.ijayl.t"] = "AatIcs,ijayl-t"
dLong$password[dLong$password=="X1qaz2wsx3edc"] = "1qaz2wsx3edc"
dLong$password[dLong$password=="p.ssw0rd"] = "p@ssw0rd"
dLong$password <- factor(dLong$password)
# plot strength ratings.
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=rating,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
#coord_flip() +
#guides(colour = guide_legend(reverse=T)) +
labs(y="Perceived Strength",x="Password",col="Passwords")
)
savePlot(boxPlotRatings,filename="boxplot-ratings-pws-v3.pdf",width=10,height=4,path="graphs")
merged <- merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
predictorsB5 <- list(  "B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism")
predictorsFeatures <- list("digits","symbols","uppercase","lowercase");
predictorsMixedModel <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=10))
predictorsMixedGraph <- c(predictorsFeatures,predictorsB5)
predictorString <- paste(predictorsMixedModel,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
featuresModel_simple <- simplifyGAM(featuresModel)
summary(featuresModel)
summary(featuresModel_simple)
#summary(lm(autoFormula,data=merged))
outputSummary(featuresModel_simple,prefix="rating-simple-b5-", path="summaries/mixed")
plot(featuresModel_simple,jit=TRUE,pages=1)
mixedModelPlot <- plotGAM(featuresModel_simple,predictors=predictorsMixedGraph)
mixedModelPlot <- plotGAM(featuresModel, predictors=predictorsFeatures,controlVariables = predictorsB5)
savePlot(mixedModelPlot[[1]],filename="rating-mixed-v2-predictors.pdf",path="graphs/mixed")
savePlot(mixedModelPlot[[2]],filename="rating-mixed-v2-b5.pdf",path="graphs/mixed")
#savePlot(boxPlotRatings[[2]],filename="rating-mixed-control.pdf",path="graphs/mixed")
mixedModelPlot[[1]]
#################################################################### manual gam
# manual simple gam
####################################################################
simpleFeaturesGam <- gam(rating ~ lowercase + uppercase + substitutions, method="REML",data=merged)
summary(simpleFeaturesGam)
outputSummary(simpleFeaturesGam,prefix="simple-",path="summaries/mixed")
manualSimplePlot <- plotGAM(simpleFeaturesGam,predictors=list("digits","length","lowercase","symbols","uppercase"),
xLab.predictors = "Feature Count",
yLab = "Password Rating",
plotResiduals = FALSE
)
savePlot(manualSimplePlot[[1]],filename="rating-manual-simple.pdf",path="graphs/mixed")
gamtabs(simpleFeaturesGam)
# manual mixed gam
####################################################################
manualMixedGam <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) + (digits*substitutions*symbols) +
s(B5_Openness,k=7) +
B5_Agreeableness +
s(B5_Neuroticism,k=9),
method="REML", data = merged)
summary(manualMixedGam)
outputSummary(manualMixedGam,prefix="09-",path="summaries/mixed")
manualMixedPlot <- plotGAM(manualMixedGam,
predictors=list("digits","length","lowercase","symbols","uppercase","chunks","substitutions","score"),
controlVariables = predictorsB5,
xLab.predictors = "Feature Count",
xLab.control = "Big Five Trait Scores",
yLab = "Password Rating",
plotResiduals = T
)
savePlot(manualMixedPlot[[1]],filename="rating-manual-mixed-v9-predictors.pdf",path="graphs/mixed")
savePlot(manualMixedPlot[[2]],filename="rating-manual-mixed-v9-b5.pdf",path="graphs/mixed")
manualMixedPlot[[1]]
manualMixedPlot[[2]]
mergedNoLeet <- merged[merged$password!='F@m1Ly07%' & merged$password!='p@ssw0rd',]
manualMixedGam_noLeet <- gam(rating ~ (digits * length) + (lowercase * length) + (symbols * length) +
(uppercase * length) +
s(B5_Openness,k=7) +
B5_Agreeableness +
s(B5_Neuroticism,k=9)
, method="REML", data = mergedNoLeet)
summary(manualMixedGam_noLeet)
outputSummary(manualMixedGam,prefix="06-noLeet-",path="summaries/mixed")
## compare fits
AIC(featuresModel,featuresModel_simple,simpleFeaturesGam, manualMixedGam)
anova(featuresModel_simple,manualMixedGam, test="F")
plotreg(
list(featuresModel_simple, manualMixedGam),
custom.model.names = c("Features + B5","Features + B5 (with interactions on length)"),
file="graphs/mixed/comparison.pdf"
)
sink(file="summaries/mixed/final-model.tex")
texreg()
###############################################################################################################################
### using guesses-log10 as strength metric.
###############################################################################################################################
continuousStrengthModel <- getSmoothedGAM("guesses_log10")
# COMPARISON BETWEEN TWO PASSWORD TYPES
# FOLLOWS THE SAME STRUCTURE AS rating.R
library(mgcv)
library(ggplot2)
library(plyr)
library(texreg)
library(lme4)
library(reshape2)
library(visreg)
#source("../../plotCI.R");
source("../../plotGAM.R");
source("../../util.R");
# read data from 100, cleaned dataset, preprocessed from excel.
d_comp100 <- read.csv("data-comparison-N100.csv", sep = ";", dec = ".")
### factorize things
d_comp100$D_Gender <- factor(d_comp100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d_comp100$D_ComputerScienceBackground <- factor(d_comp100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
responseVariablesComparison <- c("C_Length", "C_Strength",
"C_Upper","C_Digits","C_Symbols",
"C_ClassDelta"
)
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
predictorsB5 <- list("B5_Extraversion","B5_Agreeableness", "B5_Conscientiousness", "B5_Neuroticism", "B5_Openness")
predictorsSeBIS <- list("SeBIS_Securement","SeBIS_Awareness", "SeBIS_Updating", "SeBIS_Passwords")
predictorsGDMS <- list("GDMS_Rational","GDMS_Intuitive", "GDMS_Avoidant",  "GDMS_Dependent", "GDMS_Spontaneous")
autoModelsComparisonB5 <- lapply(responseVariablesComparison, getSmoothedGAM, predictors=predictorsB5, d<-d_comp100, k=8)
#autoModelsComparisonGDMS <- lapply(responseVariablesComparison, getSmoothedGAM, predictors=predictorsGDMS, d<-d_comp100)
#autoModelsComparisonSeBIS <- lapply(responseVariablesComparison, getSmoothedGAM, predictors=predictorsSeBIS, d<-d_comp100)
updatedModelsComparisonB5 <- lapply(autoModelsComparisonB5, simplifyGAM)
#updatedModelsComparisonGDMS <- lapply(autoModelsComparisonGDMS, simplifyGAM)
#updatedModelsComparisonSeBIS <- lapply(autoModelsComparisonSeBIS, simplifyGAM)
# B5
lapply(updatedModelsComparisonB5, generatePDF,
controlVariables = controlVariables, predictors = predictorsB5,
prefix.predictors="comparison-b5-predictors-", prefix.control="comparison-b5-controls-",path="graphs/b5",xLab.predictors = "Trait Scores")
# GDMS
lapply(updatedModelsComparisonGDMS, generatePDF,
controlVariables = controlVariables, predictors = predictorsGDMS,
prefix.predictors="comparison-gdms-predictors-", prefix.control="comparison-gdms-controls-",path="graphs/gdms",xLab.predictors = "GDMS Scores")
# SeBIS
lapply(updatedModelsComparisonSeBIS, generatePDF,
controlVariables = controlVariables, predictors = predictorsSeBIS,
prefix.predictors="comparison-sebis-predictors-", prefix.control="comparison-sebis-controls-",path="graphs/sebis",xLab.predictors = "Sebis Scores")
## not using lapply now because of multi-core processor race conditions... ?
for(i in updatedModelsComparisonB5) {
outputSummary(i, prefix="comparison-b5-", path="summaries/reml")
}
for(i in updatedModelsComparisonGDMS) {
outputSummary(i, prefix="comparison-gdms-", path="summaries")
}
for(i in updatedModelsComparisonSeBIS){
outputSummary(i, prefix="comparison-sebis-", path="summaries")
}
# to check autocorrelation (lines must not cross 0.2 by much)
#acf(residuals(updatedModelsComparisonB5[[1]]))
#pacf(residuals(updatedModelsComparisonB5[[1]]))
sink(file=NULL)
t.test(d100$G_Overall)
wilcox.test(d100$G_Overall)
shapiro.test(d100$G_Overall)
ks.test(d100$G_Overall)
ks.test(d100$G_Overall, pnorm())
ks.test(d100$G_Overall,runif(30))
ks.test(d100$G_Overall,rnorm(100))
ks.test(d100$G_Overall,rnorm(100, mean = mean(d100$G_Overall)))
