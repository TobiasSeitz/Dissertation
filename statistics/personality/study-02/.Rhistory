geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,7,1)) +
coord_flip()
)
max(d100$G_Special)
dNormed <- d100;
dNormed$G_Overall = dNormed$G_Overall / gOverall;
dNormed$G_Common = dNormed$G_Common / gCommon;
dNormed$G_Passphrase = dNormed$G_Passphrase / gPassphrase;
dNormed$G_Pattern = dNormed$G_Pattern / gPattern;
dNormed$G_LengthLong = dNormed$G_LengthLong / gLong;
dNormed$G_LengthShort = dNormed$G_LengthShort / gShort;
dNormed$G_Weak = dNormed$G_Weak / gWeak;
dNormed$G_Medium = dNormed$G_Medium / gMedium;
dNormed$G_Strong = dNormed$G_Strong / gStrong;
dNormed$G_Digits = dNormed$G_Digits / gDigits;
dNormed$G_Special = dNormed$G_Special / gSpecial;
dNormed$G_Uppercase = dNormed$G_Uppercase / gUppercase;
dResponseLongForm <- melt(dNormed, id.vars = "X...id", measure.vars = responseVariablesRating);
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,7,1)) +
coord_flip()
)
gOverall <- 13;
gCommon <- 3;
gPassphrase <- 2;
gPattern <- 3;
gLong <- 6;
gShort <- 7;
gWeak <- 3;
gMedium <- 4;
gStrong <- 5;
gDigits <- 8;
gSpecial <- 5;
gUppercase <- 5;
### only do this once!
dNormed <- d100;
dNormed$G_Overall = dNormed$G_Overall / gOverall;
dNormed$G_Common = dNormed$G_Common / gCommon;
dNormed$G_Passphrase = dNormed$G_Passphrase / gPassphrase;
dNormed$G_Pattern = dNormed$G_Pattern / gPattern;
dNormed$G_LengthLong = dNormed$G_LengthLong / gLong;
dNormed$G_LengthShort = dNormed$G_LengthShort / gShort;
dNormed$G_Weak = dNormed$G_Weak / gWeak;
dNormed$G_Medium = dNormed$G_Medium / gMedium;
dNormed$G_Strong = dNormed$G_Strong / gStrong;
dNormed$G_Digits = dNormed$G_Digits / gDigits;
dNormed$G_Special = dNormed$G_Special / gSpecial;
dNormed$G_Uppercase = dNormed$G_Uppercase / gUppercase;
# 2. outliers
#boxplot(d100$G_Overall, , main="Overall", boxwex=0.1)
dResponseLongForm <- melt(dNormed, id.vars = "X...id", measure.vars = responseVariablesRating);
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,7,1)) +
coord_flip()
)
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(breaks = c("Overall","Common","Passphrase","Pattern","Long","Short","Weak","Medium","Strong","Digits","Symbols","Uppercase")) +
coord_flip()
)
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels = c("Overall","Common","Passphrase","Pattern","Long","Short","Weak","Medium","Strong","Digits","Symbols","Uppercase")) +
coord_flip()
)
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels = c("Overall","Common","Passphrase","Pattern","Long","Short","Weak","Medium","Strong","Digits","Symbols","Uppercase")) +
coord_flip() +
guides(colour = guide_legend(reverse=T))
)
(outlierPlot <- ggplot(dResponseLongForm) +
geom_boxplot(aes(x=dResponseLongForm$X...id,y=value, color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels = c("Overall","Common","Passphrase","Pattern","Long","Short","Weak","Medium","Strong","Digits","Symbols","Uppercase")) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password Group")
)
savePlot(outlierPlot,"avearge-rating-boxplot.pdf",path="graphs")
savePlot(outlierPlot,"avearge-rating-boxplot.pdf",path="graphs",height=4)
cooks.distance(rFactorModel)
cooks.distance(rFactorModel_simple)
rOverallModel <- gam(G_Overall ~ s(D_Age) + D_Gender + D_ComputerScienceBackground + s(B5_Extraversion) + s(B5_Agreeableness) +
s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness),
method="REML",
#select = TRUE,
data = dNormed)
AIC(rFactorModel, rFactorModel_simple, rFactorModel_simple_GCV, rOverallModel, autoModelsRatingB5[[1]], simplifyGAM(autoModelsRatingB5[[1]],method="GCV.Cp"), simplifyGAM(rFactorModel,method="GCV.Cp"))
plotGAM(rOverallModel,controlVariables,predictorsB5)[[1]]
summary(rOverallModel)
rFactorModel_simple <- simplifyGAM(rFactorModel)
summary(rFactorModel_simple)
summary(rFactorModel)
plotGAM(rFactorModel,controlVariables,predictorsFA)[[1]]
rFactorModel_manual <- gam(G_Overall ~ + s(Factor3, k = 5) + s(Factor4, k = 5) + D_Gender +  D_ComputerScienceBackground)
rFactorModel_manual <- gam(G_Overall ~ + s(Factor3, k = 5) + s(Factor4, k = 5) + D_Gender +  D_ComputerScienceBackground, data=dNormed)
rFactorModel_manual <- gam(G_Overall ~ + s(Factor3, k = 5) + s(Factor4, k = 5) + D_Gender +  D_ComputerScienceBackground, data=testFrame)
summary(rFactorModel_manual)
plotGAM(rFactorModel_simple,controlVariables,predictorsFA)[[1]]
rFactorModel_manual <- gam(G_Overall ~ + s(Factor3, k = 5) + s(Factor4, k = 5) + D_Gender +  D_ComputerScienceBackground, method="REML",data=testFrame)
summary(rFactorModel_manual)
gam.check(rFactorModel_manual)
plotGAM(rFactorModel_manual,controlVariables,predictorsFA)[[1]]
AIC(rFactorModel, rFactorModel_simple, rFactorModel_simple_GCV, rOverallModel, autoModelsRatingB5[[1]], simplifyGAM(autoModelsRatingB5[[1]],method="GCV.Cp"), simplifyGAM(rFactorModel,method="GCV.Cp"))
AIC(rFactorModel, rFactorModel_simple, rFactorModel_simple_GCV, rFactorModel_manual, autoModelsRatingB5[[1]], simplifyGAM(autoModelsRatingB5[[1]],method="GCV.Cp"), simplifyGAM(rFactorModel,method="GCV.Cp"))
summary(autoModelsRatingB5[[1]])
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100, method="REML")
summary(autoModelsRatingB5[[1]])
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100, method="REML")
summary(rFactorModel)
summary(rFactorModel_simple)
plotGAM(rFactorModel_simple,controlVariables,predictorsFA)[[1]]
rFactorModel_simple <- simplifyGAM(rFactorModel)
summary(rFactorModel_simple)
plotGAM(rFactorModel_simple,controlVariables,predictorsFA)[[1]]
Q
Q
Q
Q
rFactorModel_simple <- simplifyGAM(rFactorModel)
gam.check(rFactorModel_simple)
plotGAM(rFactorModel_simple,controlVariables,predictorsFA)[[1]]
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100)
summary(autoModelsRatingB5[[1]])
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100, select=FALSE)
summary(autoModelsRatingB5[[1]])
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM,method="GCV.Cp");
summary(updatedModelsB5[[1]])
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-dNormed, select=FALSE)
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM,method="GCV.Cp");
summary(updatedModelsB5[[1]])
plotGAM(updatedModelsB5[[1]],controlVariables,predictorsB5)
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-dNormed, select=FALSE,method="REML")
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM,method="REML");
plotGAM(updatedModelsB5[[1]],controlVariables,predictorsB5)
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100, select=FALSE,method="REML")
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM,method="REML");
lapply(updatedModelsB5, generatePDF,
controlVariables = controlVariables, predictors = predictorsB5,
prefix.predictors="rating-b5-predictors-", prefix.control="rating-b5-controls-",path="graphs/b5-reml",xLab.predictors = "Trait Scores")
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries/reml")
}
summary(rLinModel)
sink(file=NULL)
sink(file=NULL)
summary(rLinModel)
install.packages("lm.beta")
library(lm.beta)
lm.beta(rLinModel)
lm.beta(updatedModelsB5[[1]])
source('~/Dissertation/statistics/util.R')
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries/reml")
}
source('~/Dissertation/statistics/util.R')
rOverallModel <- gamm(G_Overall ~ s(B5_Extraversion) + s(B5_Agreeableness) +
s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness) +
s(D_Age) + D_Gender + D_ComputerScienceBackground ,
method="REML",
#select = TRUE,
data = dNormed)
rOverallModel <- gamm(G_Overall ~ s(B5_Extraversion) + s(B5_Agreeableness) +
s(B5_Conscientiousness) + s(B5_Neuroticism) + s(B5_Openness) +
s(D_Age) + D_Gender + D_ComputerScienceBackground ,
#select = TRUE,
data = dNormed)
source('~/Dissertation/statistics/util.R')
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries/reml")
}
anova(rFactorModel,rFactorModel_simple,test='Chi')
anova(rFactorModel,rFactorModel_simple,test='F')
sink(file=NULL)
sink(file=NULL)
anova(rFactorModel,rFactorModel_simple,test='F')
cooks.distance(autoModelsRatingB5[[1]],updatedModelsB5[[1]])
anova(autoModelsRatingB5[[1]],updatedModelsB5[[1]],test='F')
anova(rFactorModel_simple,updatedModelsB5[[1]],test='F')
texreg(autoModelsRatingB5[[1]])
extract(autoModelsRatingB5[[1]],standardized=T)
extract(updatedModelsComparisonB5[[1]],standardized=T)
extract(updatedModelsB5[[1]],standardized=T)
gamtabs(updatedModelsB5[[1]])
wilcox.test(G_Overall ~ D_Gender, data=d100)
library(mgcv)
library(ggplot2)
library(plyr)
library(texreg)
library(lme4)
library(reshape2)
library(visreg)
library(itsadug)
library(Hmisc)
library(psych)
library(lm.beta)
source("../../plotGAM.R");
source("../../util.R");
d100 <- read.csv("dataset-N100-small.csv", sep = ";", dec = ".")
b5Items <- read.csv("b5-items.csv", sep = ";", dec = ".")
rm(testFrame)
b5FactorScores <- factanal(b5Items[,2:ncol(b5Items)],factors=10,rotation="varimax",scores="regression")$scores
b5FactorScores <- as.data.frame(b5FactorScores)
faB5 <- data.frame(d100,b5FactorScores)
predictorsFA <- as.list(names(b5FactorScores))
fa(b5Frame,1,n.obs = 100,fm="wls")
fa(b5Frame,2,n.obs = 100,fm="wls")
pcB5 <- princomp(b5Items[,2:ncol(b5Items)]) # omit ID variable
summary(pcB5)
plot(pcB5)
autoModelsRatingFA <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsFA,d<-faB5)
autoModelsRatingFA <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsFA,d<-faB5,method="REML")
summary(autoModelsRatingFA[[1]])
updatedModelsFA <- lapply(autoModelsRatingFA, simplifyGAM,method="REML")
lapply(updatedModelsFA, generatePDF,
controlVariables = controlVariables, predictors = predictorsFA,
prefix.predictors="rating-b5-predictors-", prefix.control="rating-b5-controls-",path="graphs/fa-reml",xLab.predictors = "Trait Scores")
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries/reml")
}
sink(file=NULL)
for(i in updatedModelsFA) {
outputSummary(i, prefix="fa-", path="summaries/fa-reml")
}
summary(factor.scores())
summary(b5FactorScores)
factanal(b5Items[,2:ncol(b5Items)],factors=10,rotation="varimax",scores="regression")
library(mgcv)
library(plyr)
library(reshape2)
d100 <- read.csv("dataset-N100-small.csv", sep = ";", dec = ".")
pwAnalysis <- read.csv("pw-analysis.csv", sep = ",", dec = ".")
View(pwAnalysis)
pwAnalysis[,1:12]
pwAnalysis <- pwAnalysis[,1:12] # we only need the first 12 columns
library(reshape2)
d <- read.csv("dataset-mixed-model.csv", sep = ";", dec = ".")
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".")
View(d)
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=FALSE)
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=FALSE)
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=TRUE)
melt(d100, id.vars = c("X...id","B5_Openness"), measure.vars = c("etuhcarap"))
melt(d100, id.vars = c("X...id","B5_Openness"), measure.vars = c("etuhcarap"))
melt(d, id.vars = c("X...id","B5_Openness"), measure.vars = c("etuhcarap"))
d <- read.csv("data-mixed-model.csv", sep = ";", dec = ".",check.names=TRUE)
melt(d, id.vars = c("X...id","B5_Openness"), measure.vars = c("etuhcarap"))
melt(d, id.vars = c("X...subject","B5_Openness"), measure.vars = c("etuhcarap"))
idVars <- c("X...subject",
"D_Gender",
"D_Age",
"D_ComputerScienceBackground",
"B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism"
)
d[,!which(names(d) %in% idVars)]
d[,which(names(d) %in% idVars)]
d[,!which(names(d) %in% idVars)]
d[,which(names(d) !%in% idVars)]
d[which(names(d) %in% idVars)]
d[names(d) %in% idVars]
d[!d[names(d) %in% idVars]]
d[!names(d) %in% idVars]
head(d[!names(d) %in% idVars])
names((d[!names(d) %in% idVars]))
names(d[!names(d) %in% idVars])
measureVars <- names(d[!names(d) %in% idVars])
measureVars <- names(d[!names(d) %in% idVars])
dLong <- melt(d, id.vars = , measure.vars = measureVars)
View(dLong)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=variable,y=value,color=variable)))
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=variable,y=value,color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password")
)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=variable,y=value,color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete() +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password")
)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=variable,y=value,color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password")
)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=variable,y=value,color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password",col="Password")
)
savePlot(boxPlotRatings,filename="boxplot-ratings-pws.pdf",width=10,height=5,path="graphs")
View(pwAnalysis)
View(dLong)
View(d)
(boxPlotRatings <- ggplot(dLong) +
geom_violin(aes(x=variable,y=value,color=variable)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password",col="Password")
)
rename(dLong, c("variable"="password"))
merge(x=dLong,y=pwAnalysis,by="password",all.x=TRUE)
merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
dLong <- rename(dLong, c("variable"="password")) # requires plyr
View(dLong)
merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
dLong <- rename(dLong, c("variable"="password","value"="rating")) # requires plyr
dLong <- melt(d, id.vars = , measure.vars = measureVars)
dLong <- rename(dLong, c("variable"="password","value"="rating")) # requires plyr
merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
names(merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE))
merged <- merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
View(merged)
gam(merged$rating ~ merged$length + merged$digits + merged$symbols + + merged$uppercase + merged$lowercase +
merged$guesses_log10 + merged$substitutions + merged$chunks, data=merged)
featuresModel <- gam(merged$rating ~ merged$length + merged$digits + merged$symbols + + merged$uppercase + merged$lowercase +
merged$guesses_log10 + merged$substitutions + merged$chunks, data=merged, method="REML")
summary(featuresModel)
View(merged)
dLong <- melt(d, id.vars = , measure.vars = measureVars)
dLong <- rename(dLong, c("variable"="password","value"="rating")) # requires plyr
dLong$password["etuhcarap"]
dLong$password[dLong$password=="etuhcarap"]
dLong$password[dLong$password=="X.thedzfhg123"] = "thedzfhg123"
dLong <- melt(d, id.vars = , measure.vars = measureVars)
dLong <- rename(dLong, c("variable"="password","value"="rating")) # requires plyr
dLong$password[dLong$password=="X.thedzfhg123"]
dLong$password <- as.character(dLong$password)
dLong$password[dLong$password=="X.thedzfhg123"] = "thedzfhg123"
dLong$password[dLong$password=="X11Nd1sPPut8ble99"] = "11Nd1sPPut8ble99"
dLong$password[dLong$password=="F.m1Ly07."] = "F@m1Ly07%"
dLong$password[dLong$password=="ocean4.Size..beer.Car"] = "ocean4 Size !beer Car"
dLong$password[dLong$password=="bicycles.peaches.cold"] = "bicycles-peaches-cold"
dLong$password[dLong$password=="AatIcs.ijayl.t"] = "AatIcs,ijayl-t"
dLong$password[dLong$password=="X1qaz2wsx3edc"] = "1qaz2wsx3edc"
dLong$password[dLong$password=="p.ssw0rd"] = "p@ssw0rd"
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=value,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password",col="Password")
)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=rating,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password",col="Password")
)
savePlot(boxPlotRatings,filename="boxplot-ratings-pws.pdf",width=10,height=5,path="graphs")
merged <- merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
featuresModel <- gam(merged$rating ~ merged$length + merged$digits + merged$symbols + + merged$uppercase + merged$lowercase +
merged$guesses_log10 + merged$substitutions + merged$chunks, data=merged, method="REML")
summary(featuresModel)
plotGAM(featuresModel,list(),predictors=list("length","digits","symbols","lowercase","uppercase","guesses_log10","substitutions","chunks"))
plotGAM(featuresModel,list("guesses_log10"),predictors=list("length","digits","symbols","lowercase","uppercase","guesses_log10","substitutions","chunks"))
dLong$password <- factor(dLong$password)
(boxPlotRatings <- ggplot(dLong) +
geom_boxplot(aes(x=password,y=rating,color=password)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
scale_x_discrete(labels=c()) +
coord_flip() +
guides(colour = guide_legend(reverse=T)) +
labs(y="Average Rating",x="Password",col="Password")
)
savePlot(boxPlotRatings,filename="boxplot-ratings-pws.pdf",width=10,height=5,path="graphs")
merged <- merge(x=dLong,y=pwAnalysis,by.x="password",by.y="password",all.x=TRUE)
featuresModel <- gam(merged$rating ~ merged$length + merged$digits + merged$symbols + + merged$uppercase + merged$lowercase +
merged$guesses_log10 + merged$substitutions + merged$chunks, data=merged, method="REML")
plotGAM(featuresModel,list("guesses_log10"),predictors=list("length","digits","symbols","lowercase","uppercase","guesses_log10","substitutions","chunks"))
View(getSmoothedGAM)
smoothPredictors <- lapply(predictors,function(p,k){
if(is.null(k)){
p <- paste0("s(",p,")")
}
else {
p <- paste0("s(",p,",k=",k,")")
}
p
})
smoothPredictors <- function(p,k=NULL){
if(is.null(k)){
p <- paste0("s(",p,")")
}
else {
p <- paste0("s(",p,",k=",k,")")
}
p
}
concatPredictors = paste(lapply(predictorsFeatures,smoothPredictors,5),collapse = "+")
predictorsFeatures <- list("length","digits","symbols","lowercase","uppercase","substitutions","chunks");
predictorString <- paste(lapply(predictorsFeatures,smoothPredictors,5),collapse = "+");
autoFormula <- as.formula(paste(column,predictorString,sep = "~"))
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
predictorString <- paste(lapply(predictorsFeatures,smoothPredictors,2),collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
predictorString <- paste(predictorsFeatures,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
plotGAM(featuresModel,list("guesses_log10"),predictors=)[[1]]
summary(featuresModel)
summary(featuresModel)
predictorString <- paste(predictorsFeatures,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
summary(featuresModel)
predictorsFeatures <- list("length","digits","symbols","uppercase","substitutions","chunks");
predictorString <- paste(predictorsFeatures,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
summary(featuresModel)
lm(autoFormula,data=merged)
summary(lm(autoFormula,data=merged))
plot(featuresModel,jit=TRUE,pages=1)
View(plotGAM)
debugSource('~/Dissertation/statistics/plotGAM.R', echo=TRUE)
plotGAM(featuresModel,list("guesses_log10"),predictors=predictorsFeatures)[[1]]
predictorsB5 <- list(  "B5_Openness",
"B5_Conscientiousness",
"B5_Extraversion",
"B5_Agreeableness",
"B5_Neuroticism")
predictorsFeatures <- list("digits","symbols","uppercase","substitutions","chunks");
predictorString <- paste(predictorsFeatures,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
summary(featuresModel)
plotGAM(featuresModel,list("guesses_log10"),predictors=predictorsFeatures)[[1]]
c(predictorsB5,predictorsFeatures)
predictorString <- paste(c(predictorsFeatures,predictorsB5),collapse = "+");
predictorString <- paste(c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=5)),collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
summary(featuresModel)
predictorString <- paste(predictorsMixed,collapse = "+");
predictorsMixed <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=5))
predictorString <- paste(predictorsMixed,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
summary(featuresModel)
predictorsFeatures <- list("digits","symbols","uppercase","substitutions");
predictorsMixed <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=5))
mixedModelPlot <- plotGAM(featuresModel,list("guesses_log10"),predictors=predictorsMixed)
savePlot(boxPlotRatings[[1]],filename="rating-mixed-predictors.pdf",path="graphs/mixed")
predictorsMixed <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=5))
predictorsMixed <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=5))
predictorString <- paste(predictorsMixed,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
summary(featuresModel)
AIC(rOverallModel,featuresModel)
featuresModel_simple <- simplifyGAM(featuresModel)
summary(featuresModel_simple)
outputSummary(featuresModel_simple)
mixedModelPlot <- plotGAM(featuresModel_simple,list("guesses_log10"),predictors=predictorsMixed)
c
savePlot(boxPlotRatings[[1]],filename="rating-mixed-predictors.pdf",path="graphs/mixed")
mixedModelPlot <- plotGAM(featuresModel_simple,controlVariables = predictorsB5,predictors=predictorsMixed)
summary(featuresModel_simple)
summary(lm(autoFormula,data=merged))
outputSummary(featuresModel_simple,path="summaries/mixed")
predictorsMixed <- c(predictorsFeatures,lapply(predictorsB5,smoothPredictors,k=7))
predictorString <- paste(predictorsMixed,collapse = "+");
autoFormula <- as.formula(paste("rating",predictorString,sep = "~"))
featuresModel <- gam(autoFormula, data=merged, method="REML")
featuresModel_simple <- simplifyGAM(featuresModel)
summary(featuresModel)
summary(featuresModel_simple)
outputSummary(featuresModel_simple,path="summaries/mixed")
plot(featuresModel,jit=TRUE,pages=1)
plot(featuresModel_simple,jit=TRUE,pages=1)
mixedModelPlot <- plotGAM(featuresModel_simple,controlVariables = predictorsB5,predictors=predictorsMixed)
debugSource('~/Dissertation/statistics/plotGAM.R', echo=TRUE)
mixedModelPlot <- plotGAM(featuresModel_simple,controlVariables = predictorsB5,predictors=predictorsMixed)
featuresModel <- gam(autoFormula, data=merged)
featuresModel_simple <- simplifyGAM(featuresModel)
summary(featuresModel)
featuresModel <- gam(autoFormula, data=merged, method="REML")
mixedModelPlot <- plotGAM(featuresModel,controlVariables = predictorsB5, predictors=predictorsMixed)
savePlot(boxPlotRatings[[1]],filename="rating-mixed-predictors.pdf",path="graphs/mixed")
savePlot(boxPlotRatings[[2]],filename="rating-mixed-control.pdf",path="graphs/mixed")
mixedModelPlot[[1]]
