}
simplifyModel <- function(smoothedModel){
### dummy. this is actually done programmatically but works just fine:
nFormulaString <- "G_Overall ~ D_Gender + D_Age + B5_Openness + s(B5_Neuroticism)";
simpleFormula <- update.formula(formula.gam(smoothedModel), as.formula(nFormulaString));
update(smoothedModel, simpleFormula)
}
myPlot <- function(gaModel,predictors){
plotData <- visreg(gaModel, type = "contrast", plot = FALSE)
# The output from visreg is a list of the same length as the number of 'x' variables,
#   so we use ldply to pick the objects we want from the each list part and make a dataframe:
smooths <- ldply(plotData, function(part)
data.frame(
Variable = part$meta$x,
x = part$fit[[part$meta$x]],
smooth = part$fit$visregFit,
lower = part$fit$visregLwr,
upper = part$fit$visregUpr
))
#######
##
##  HERE'S A PROBLEM -- WHERE DOES IT COME FROM?
##  in the first myPlot() call, smooth contains the right factor levels for D_Gender --> (1,2)
##  in the second myPlot() call with the updated model, the factor levels for D_Gender are --> ("Male","Female") -- why?
##
predictorSmooths <- smooths[smooths$Variable %in% predictors, ]
(predictorPlot <- ggplot(predictorSmooths, aes(x, smooth)) +
geom_line() +
geom_line(aes(y = lower), linetype = "dashed") +
geom_line(aes(y = upper), linetype = "dashed") +
facet_grid(. ~ Variable, scales = "free_x"))
predictorPlot
}
testModel <- getSmoothedGAM("G_Overall",predictors,d<-sub) ## need d<-sub or else visred() fails...
summary(testModel) ### all good ---> 3 smooth terms
myPlot(testModel, predictors) ### all good
simplifyModel <- function(smoothedModel){
### dummy. this is actually done programmatically but works just fine:
nFormulaString <- "G_Overall ~ D_Gender + D_Age + B5_Openness + s(B5_Neuroticism)";
simpleFormula <- update.formula(formula.gam(smoothedModel), as.formula(nFormulaString));
update(smoothedModel, simpleFormula)
}
myPlot <- function(gaModel,predictors){
plotData <- visreg(gaModel, type = "contrast", plot = FALSE)
# The output from visreg is a list of the same length as the number of 'x' variables,
#   so we use ldply to pick the objects we want from the each list part and make a dataframe:
smooths <- ldply(plotData, function(part)
data.frame(
Variable = part$meta$x,
x = part$fit[[part$meta$x]],
smooth = part$fit$visregFit,
lower = part$fit$visregLwr,
upper = part$fit$visregUpr
))
#######
##
##  HERE'S A PROBLEM -- WHERE DOES IT COME FROM?
##  in the first myPlot() call, smooth contains the right factor levels for D_Gender --> (1,2)
##  in the second myPlot() call with the updated model, the factor levels for D_Gender are --> ("Male","Female") -- why?
##
predictorSmooths <- smooths[smooths$Variable %in% predictors, ]
(predictorPlot <- ggplot(predictorSmooths, aes(x, smooth)) +
geom_line() +
geom_line(aes(y = lower), linetype = "dashed") +
geom_line(aes(y = upper), linetype = "dashed") +
facet_grid(. ~ Variable, scales = "free_x"))
predictorPlot
}
testModel <- getSmoothedGAM("G_Overall",predictors,d<-sub) ## need d<-sub or else visred() fails...
summary(testModel) ### all good ---> 3 smooth terms
myPlot(testModel, predictors) ### all good
testModel_simpler <- simplifyModel(testModel) ### all good
summary(testModel_simpler) ### all good  ---> 1 smooth term
myPlot(testModel_simpler, predictors) ### not good. "Error: Discrete value supplied to continuous scale"
simplifyModel <- function(smoothedModel){
### dummy. this is actually done programmatically but works just fine:
nFormulaString <- "G_Overall ~ D_Age + B5_Openness + s(B5_Neuroticism) + D_Gender";
simpleFormula <- update.formula(formula.gam(smoothedModel), as.formula(nFormulaString));
update(smoothedModel, simpleFormula)
}
myPlot <- function(gaModel,predictors){
plotData <- visreg(gaModel, type = "contrast", plot = FALSE)
# The output from visreg is a list of the same length as the number of 'x' variables,
#   so we use ldply to pick the objects we want from the each list part and make a dataframe:
smooths <- ldply(plotData, function(part)
data.frame(
Variable = part$meta$x,
x = part$fit[[part$meta$x]],
smooth = part$fit$visregFit,
lower = part$fit$visregLwr,
upper = part$fit$visregUpr
))
#######
##
##  HERE'S A PROBLEM -- WHERE DOES IT COME FROM?
##  in the first myPlot() call, smooth contains the right factor levels for D_Gender --> (1,2)
##  in the second myPlot() call with the updated model, the factor levels for D_Gender are --> ("Male","Female") -- why?
##
predictorSmooths <- smooths[smooths$Variable %in% predictors, ]
(predictorPlot <- ggplot(predictorSmooths, aes(x, smooth)) +
geom_line() +
geom_line(aes(y = lower), linetype = "dashed") +
geom_line(aes(y = upper), linetype = "dashed") +
facet_grid(. ~ Variable, scales = "free_x"))
predictorPlot
}
testModel <- getSmoothedGAM("G_Overall",predictors,d<-sub) ## need d<-sub or else visred() fails...
summary(testModel) ### all good ---> 3 smooth terms
myPlot(testModel, predictors) ### all good
testModel_simpler <- simplifyModel(testModel) ### all good
summary(testModel_simpler) ### all good  ---> 1 smooth term
myPlot(testModel_simpler, predictors) ### not good. "Error: Discrete value supplied to continuous scale"
library(mgcv)
library(ggplot2)
library(plyr)
library(texreg)
library(lme4)
library(reshape2)
library(visreg)
source("../../plotGAM.R");
source("../../util.R");
d100 <- read.csv("dataset-N100.csv", sep = ";", dec = ".")
d100$D_Gender <- factor(d100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d100$D_ComputerScienceBackground <- factor(d100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
responseVariablesRating <- c("G_Overall", "G_Common","G_Passphrase","G_Pattern",
"G_LengthLong","G_LengthShort",
"G_Weak","G_Medium","G_Strong",
"G_Digits","G_Special","G_Uppercase")
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
predictorsB5 <- list("B5_Extraversion","B5_Agreeableness", "B5_Conscientiousness", "B5_Neuroticism", "B5_Openness")
predictorsSeBIS <- list("SeBIS_Securement","SeBIS_Awareness", "SeBIS_Updating", "SeBIS_Passwords")
predictorsGDMS <- list("GDMS_Rational","GDMS_Intuitive", "GDMS_Avoidant",  "GDMS_Dependent", "GDMS_Spontaneous")
getSmoothedGAM <- function(column,predictors,d){
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
rightHand <- paste(controls, concatPredictors, sep = "+");
autoFormula <- as.formula(paste(column,rightHand,sep = "~"))
m <- gam(autoFormula, data=d);
# visreg needs the data to extract residuals, make sure to add them:
#model$data <- d
m
}
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100)
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d<-d100)
autoModelsRatingGDMS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsGDMS,d<-d100)
testModel <- autoModelsRatingB5[[1]]
plotGAM(testModel,controlVariables=controlVariables, predictors=predictorsB5)[[2]]
plotSimplifiedGam(testModel,controlVariables=controlVariables, predictors=predictorsB5)[[2]]
source('~/Dissertation/statistics/plotGAM.R')
plotSimplifiedGam(testModel,controlVariables=controlVariables, predictors=predictorsB5)[[2]]
testModel <- gam(as.formula(formula1),sub)
formula1 <- "G_Overall ~ s(B5_Openness) + s(B5_Neuroticism) + D_Gender + s(D_Age)";
formula2 <- "G_Overall ~ D_Gender + s(D_Age) + s(B5_Openness) + s(B5_Neuroticism)";
testModel <- gam(as.formula(formula1),sub)
testModel <- gam(as.formula(formula1),data=sub)
summary(testModel) ### all good ---> 3 smooth terms
m1 <- gam(as.formula(formula1),data=sub)
summary(m1) ### all good ---> 2 smooth terms
myPlot(m1, predictors) ### all good
m2 <- gam(as.formula(formula2),data=sub)
summary(m2) ### all good  ---> 1 smooth term
df <- read.csv("dataset-N100.csv", sep = ";", dec = ".")
sub <- df[,(names(df) %in% c("D_Gender","G_Overall","B5_Openness","B5_Neuroticism"))]
sub$D_Gender <- factor(df$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
predictors <- list("B5_Neuroticism", "B5_Openness")
formula1 <- "G_Overall ~ s(B5_Openness) + s(B5_Neuroticism) + D_Gender";
formula2 <- "G_Overall ~ D_Gender + s(B5_Openness) + s(B5_Neuroticism)";
myPlot <- function(gaModel,predictors){
# next two statements from https://stackoverflow.com/a/21182922/1447479
plotData <- visreg(gaModel, type = "contrast", plot = FALSE)
smooths <- ldply(plotData, function(part)
data.frame(
Variable = part$meta$x,
x = part$fit[[part$meta$x]],
smooth = part$fit$visregFit,
lower = part$fit$visregLwr,
upper = part$fit$visregUpr
))
#######
##
##  HERE'S A PROBLEM -- obviously caused by the ldply call - but why?
##  in formula1, where D_Gender is last, "smooth" contains the right factor levels for D_Gender --> (1,2)
##  in formula2 that begins with D_Gender, the factor levels for D_Gender are --> ("Male","Female") -- why?
##
predictorSmooths <- smooths[smooths$Variable %in% predictors, ]
(predictorPlot <- ggplot(predictorSmooths, aes(x, smooth)) +
geom_line() +
geom_line(aes(y = lower), linetype = "dashed") +
geom_line(aes(y = upper), linetype = "dashed") +
facet_grid(. ~ Variable, scales = "free_x"))
predictorPlot
}
m1 <- gam(as.formula(formula1),data=sub)
summary(m1) ### all good ---> 2 smooth terms
myPlot(m1, predictors) ### all good
m2 <- gam(as.formula(formula2),data=sub) ### all good
summary(m2) ### all good  ---> 1 smooth term
myPlot(m2, predictors) ### not good. "Error: Discrete value supplied to continuous scale"
# minimal working example
library(mgcv)
library(ggplot2)
library(plyr)
library(visreg)
df <- read.csv("dataset-N100.csv", sep = ";", dec = ".")
sub <- df[,(names(df) %in% c("D_Gender","G_Overall","B5_Openness","B5_Neuroticism"))]
### factorize things
sub$D_Gender <- factor(df$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
predictors <- list("B5_Neuroticism", "B5_Openness")
formula1 <- "G_Overall ~ s(B5_Openness) + s(B5_Neuroticism) + D_Gender";
formula2 <- "G_Overall ~ D_Gender + s(B5_Openness) + s(B5_Neuroticism)";
myPlot <- function(gaModel,predictors){
# next two statements from https://stackoverflow.com/a/21182922/1447479
plotData <- visreg(gaModel, type = "contrast", plot = FALSE)
smooths <- ldply(plotData, function(part)
data.frame(
Variable = part$meta$x,
x = part$fit[[part$meta$x]],
smooth = part$fit$visregFit,
lower = part$fit$visregLwr,
upper = part$fit$visregUpr
))
#######
##
##  HERE'S A PROBLEM -- obviously caused by the ldply call - but why?
##  in formula1, where D_Gender is last, "smooth" contains the right factor levels for D_Gender --> (1,2)
##  in formula2 that begins with D_Gender, the factor levels for D_Gender are --> ("Male","Female") -- why?
##
predictorSmooths <- smooths[smooths$Variable %in% predictors, ]
(predictorPlot <- ggplot(predictorSmooths, aes(x, smooth)) +
geom_line() +
geom_line(aes(y = lower), linetype = "dashed") +
geom_line(aes(y = upper), linetype = "dashed") +
facet_grid(. ~ Variable, scales = "free_x"))
predictorPlot
}
m1 <- gam(as.formula(formula1),data=sub)
summary(m1) ### all good
myPlot(m1, predictors) ### all good
m2 <- gam(as.formula(formula2),data=sub) ### all good
summary(m2) ### all good, no obvious change
### Problem:
myPlot(m2, predictors) ### not good.
### Error: "Each group consists of only one observation. Do you need to adjust the group aesthetic?"
source('~/Dissertation/statistics/plotGAM.R')
df <- read.csv("https://raw.githubusercontent.com/TobiasSeitz/r-swag/master/testdata/dataset-N100.csv", sep = ";", dec = ".")
sub <- df[,(names(df) %in% c("D_Gender","G_Overall","B5_Openness","B5_Neuroticism"))]
sub$D_Gender <- factor(df$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
predictors <- list("B5_Neuroticism", "B5_Openness")
formula1 <- "G_Overall ~ s(B5_Openness) + s(B5_Neuroticism) + D_Gender";
formula2 <- "G_Overall ~ D_Gender + s(B5_Openness) + s(B5_Neuroticism)";
myPlot <- function(gaModel,predictors){
# next two statements from https://stackoverflow.com/a/21182922/1447479
plotData <- visreg(gaModel, type = "contrast", plot = FALSE)
smooths <- ldply(plotData, function(part)
data.frame(
Variable = part$meta$x,
x = part$fit[[part$meta$x]],
smooth = part$fit$visregFit,
lower = part$fit$visregLwr,
upper = part$fit$visregUpr
))
#######
##
##  HERE'S A PROBLEM -- obviously caused by the ldply call - but why?
##  in formula1, where D_Gender is last, "smooth" contains the right factor levels for D_Gender --> (1,2)
##  in formula2 that begins with D_Gender, the factor levels for D_Gender are --> ("Male","Female") -- why?
##
predictorSmooths <- smooths[smooths$Variable %in% predictors, ]
(predictorPlot <- ggplot(predictorSmooths, aes(x, smooth)) +
geom_line() +
geom_line(aes(y = lower), linetype = "dashed") +
geom_line(aes(y = upper), linetype = "dashed") +
facet_grid(. ~ Variable, scales = "free_x"))
predictorPlot
}
m1 <- gam(as.formula(formula1),data=sub)
summary(m1) ### all good
myPlot(m1, predictors) ### all good
debugSource('~/Dissertation/statistics/personality/study-02/so-problem.R', echo=TRUE)
View(smooths)
View(smooths)
source('~/Dissertation/statistics/plotGAM.R')
Q
Q
Q
Q
Q
Q
Q
source('~/Dissertation/statistics/plotGAM.R')
source('~/Dissertation/statistics/plotGAM.R')
source("../../util.R");
source("../../plotGAM.R");
source("../../util.R");
d100 <- read.csv("dataset-N100.csv", sep = ";", dec = ".")
d100$D_Gender <- factor(d100$D_Gender,levels=c("Male","Female"),labels=c("Male","Female"))
d100$D_ComputerScienceBackground <- factor(d100$D_ComputerScienceBackground, levels=c("No","Yes"), labels=c("No","Yes"))
responseVariablesRating <- c("G_Overall", "G_Common","G_Passphrase","G_Pattern",
"G_LengthLong","G_LengthShort",
"G_Weak","G_Medium","G_Strong",
"G_Digits","G_Special","G_Uppercase")
controlVariables <- list("D_Age","D_Gender","D_ComputerScienceBackground")
predictorsB5 <- list("B5_Extraversion","B5_Agreeableness", "B5_Conscientiousness", "B5_Neuroticism", "B5_Openness")
predictorsSeBIS <- list("SeBIS_Securement","SeBIS_Awareness", "SeBIS_Updating", "SeBIS_Passwords")
predictorsGDMS <- list("GDMS_Rational","GDMS_Intuitive", "GDMS_Avoidant",  "GDMS_Dependent", "GDMS_Spontaneous")
getSmoothedGAM <- function(column,predictors,d){
# attention: to avoid weird collapses of the universe, make sure to have a continuous variable as first variable.
# having D_Gender first breaks all kinds of things later.
# you have been warned.
controls <- "s(D_Age) + D_Gender + D_ComputerScienceBackground"
smoothedPredictors <- lapply(predictors,function(p){
paste0("s(",p,")")
})
concatPredictors = paste(smoothedPredictors,collapse = "+")
rightHand <- paste(controls, concatPredictors, sep = "+");
autoFormula <- as.formula(paste(column,rightHand,sep = "~"))
m <- gam(autoFormula, data=d);
m
}
autoModelsRatingB5 <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsB5,d<-d100)
autoModelsRatingSeBIS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsSeBIS,d<-d100)
autoModelsRatingGDMS <- lapply(responseVariablesRating, getSmoothedGAM,predictors=predictorsGDMS,d<-d100)
source('~/Dissertation/statistics/plotGAM.R')
source("../../util.R");
updatedModelsB5 <- lapply(autoModelsRatingB5, simplifyGAM);
updatedModelsSeBIS <- lapply(autoModelsRatingSeBIS, simplifyGAM);
updatedModelsGDMS <- lapply(autoModelsRatingGDMS, simplifyGAM);
summary(updatedModelsB5[[1]])
plotGAM(updatedModelsB5[[1]],controlVariables=controlVariables, predictors=predictorsB5, xLab.predictors="Trait Score")[[1]]
plotGAM(updatedModelsB5[[1]],controlVariables=controlVariables, predictors=predictorsB5, xLab.predictors="Trait Score")[[2]]
lapply(updatedModelsB5, function(model){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(model,controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors="Trait Score")
savePlot(autoPlots[[1]],paste0("rating-b5predictor-",dependent,".pdf"),path="graphs/updated-v2")
savePlot(autoPlots[[2]],paste0("rating-b5control-",dependent,".pdf"),path="graphs/updated-v2")
})
generatePDF <- function(model,
prefix.predictors = "model-predictors-",
prefix.control = "model-controls-",
path = "graphs",
xLab.predictors = NULL){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(model,controlVariables=controlVariables, predictors=predictorsB5, yLab = dependent, xLab.predictors=xLab.predictors)
savePlot(autoPlots[[1]],paste0(prefix.predictors,dependent,".pdf"),path=path)
savePlot(autoPlots[[2]],paste0(prefix.control,dependent,".pdf"),path=path)
}
lapply(updatedModelsB5, generatePDF, prefix.predictors="rating-b5-predictors-",path="graphs/b5",xLab.predictors = "Trait Score")
lapply(updatedModelsB5, generatePDF, prefix.predictors="rating-b5-predictors-", prefix.controls="rating-b5-controls-",path="graphs/b5",xLab.predictors = "Trait Score")
lapply(updatedModelsB5, generatePDF, prefix.predictors="rating-b5-predictors-", prefix.control="rating-b5-controls-",path="graphs/b5",xLab.predictors = "Trait Score")
lapply(updatedModelsGDMS, generatePDF,
prefix.predictors="rating-gdms-predictors-", prefix.controls="rating-gdms-controls-",path="graphs/gdms",xLab.predictors = "Trait Score")
lapply(updatedModelsGDMS, generatePDF,
prefix.predictors="rating-gdms-predictors-", prefix.control="rating-gdms-controls-",path="graphs/gdms",xLab.predictors = "GDMS Score")
generatePDF <- function(model,
controlVariables,
predictors,
prefix.predictors = "model-predictors-",
prefix.control = "model-controls-",
path = "graphs",
xLab.predictors = NULL){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(model,controlVariables=controlVariables, predictors=predictors, yLab = dependent, xLab.predictors=xLab.predictors)
savePlot(autoPlots[[1]],paste0(prefix.predictors,dependent,".pdf"),path=path)
savePlot(autoPlots[[2]],paste0(prefix.control,dependent,".pdf"),path=path)
}
generatePDF <- function(model,
controlVariables,
predictors,
prefix.predictors = "model-predictors-",
prefix.control = "model-controls-",
path = "graphs",
xLab.predictors = NULL){
dependent <- all.vars(model$formula)[1]
autoPlots <- plotGAM(model,controlVariables=controlVariables, predictors=predictors, yLab = dependent, xLab.predictors=xLab.predictors)
savePlot(autoPlots[[1]],paste0(prefix.predictors,dependent,".pdf"),path=path)
savePlot(autoPlots[[2]],paste0(prefix.control,dependent,".pdf"),path=path)
}
lapply(updatedModelsGDMS, generatePDF,
controlVariables = controlVariables, predictors = predictorsGDMS,
prefix.predictors="rating-gdms-predictors-", prefix.control="rating-gdms-controls-",path="graphs/gdms",xLab.predictors = "GDMS Scores")
lapply(updatedModelsSeBIS, generatePDF,
controlVariables = controlVariables, predictors = predictorsSeBIS,
prefix.predictors="rating-sebis-predictors-", prefix.control="rating-sebis-controls-",path="graphs/sebis",xLab.predictors = "Sebis Scores")
gam.fit(updatedModelsB5[[1]])
gam.vcomp(updatedModelsB5[[1]])
gam.check(updatedModelsB5[[1]])
allUpdatedModels <- c(updatedModelsB5,updatedModelsGDMS, updatedModelsSeBIS);
sink("summaries.txt");
allUpdatedModels <- c(updatedModelsB5,updatedModelsGDMS, updatedModelsSeBIS);
lapply(allUpdatedModels,function(modelList){
lapply(modelList, function(m){
dependent <- all.vars(model$formula)[1]
separator <- "---------------------------"
print(separator)
print(dependent)
print(summary(m))
print(separator)
})
})
sink(file=NULL)
sink("summaries.txt");
allUpdatedModels <- c(updatedModelsB5,updatedModelsGDMS, updatedModelsSeBIS);
lapply(allUpdatedModels,function(modelList){
lapply(modelList, function(m){
dependent <- all.vars(m$formula)[1]
separator <- "---------------------------"
print(separator)
print(dependent)
print(summary(m))
print(separator)
})
})
sink(file=NULL)
sink("summaries.txt");
lapply(updatedModelsB5, function(m){
dependent <- all.vars(m$formula)[1]
separator <- "---------------------------"
print(separator)
print(dependent)
print(summary(m))
print(separator)
})
sink(file=NULL)
sink("summaries.txt");
lapply(updatedModelsB5, function(m){
dependent <- all.vars(m$formula)[1]
separator <- "---------------------------"
separator
dependent
separator
print(summary(m))
separator
})
sink(file=NULL)
for(i in updatedModelsB5){
print(summary(i))
}
for(i in updatedModelsB5){
sink(paste0("b5-",dependent,".txt"));
print(summary(i))
sink(file=NULL)
}
sink(file=NULL)
for(i in updatedModelsB5){
dependent <- all.vars(m$formula)[1]
sink(paste0("b5-",dependent,".txt"));
print(summary(i))
sink(file=NULL)
}
for(i in updatedModelsB5){
dependent <- all.vars(i$formula)[1]
sink(paste0("b5-",dependent,".txt"));
print(summary(i))
sink(file=NULL)
}
allUpdatedModels <- c(updatedModelsB5,updatedModelsGDMS, updatedModelsSeBIS);
outputSummary <- function(m,prefix){
dependent <- all.vars(m$formula)[1]
sink(paste0(prefix,dependent,".txt"));
print(summary(i))
sink(file=NULL)
}
sink(file=NULL)
View(savePlot)
outputSummary <- function(m,prefix,path=NULL){
# create a directory if it does not exist
if(!is.null(path)) dir.create(path, showWarnings = FALSE)
else path <- getwd()
dependent <- all.vars(m$formula)[1]
filename <- paste0(prefix,dependent,".txt")
fullpath <- file.path(path,filename);
sink(fullpath);
print(summary(i))
sink(file=NULL)
}
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries")
}
for(i in updatedModelsGDMS) {
outputSummary(i, prefix="gdms-", path="summaries")
}
for(i in updatedModelsSeBIS){
outputSummary(i, prefix="sebis-", path="summaries")
}
gam.check(updatedModelsB5[[1]])
gam.check(updatedModelsB5[[1]])
outputSummary <- function(m,prefix="",path=NULL){
# create a directory if it does not exist
if(!is.null(path)) dir.create(path, showWarnings = FALSE)
else path <- getwd()
dependent <- all.vars(m$formula)[1]
filename <- paste0(prefix,dependent,".txt")
fullpath <- file.path(path,filename);
sink(fullpath);
print(summary(i))
print("GAM.CHECK:")
print(gam.check(i))
sink(file=NULL)
}
for(i in updatedModelsB5) {
outputSummary(i, prefix="b5-", path="summaries")
}
for(i in updatedModelsGDMS) {
outputSummary(i, prefix="gdms-", path="summaries")
}
for(i in updatedModelsSeBIS){
outputSummary(i, prefix="sebis-", path="summaries")
}
View(plotGAM)
