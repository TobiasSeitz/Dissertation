}
getPercentageDataFrame(d, c("Control","Mangled"),"guesses_log10")
debugSource('~/Dissertation/statistics/decoy/guess-number-plot.R', echo=TRUE)
debugSource('~/Dissertation/statistics/decoy/guess-number-plot.R', echo=TRUE)
debugSource('~/Dissertation/statistics/decoy/guess-number-plot.R', echo=TRUE)
getPercentageDataFrame <- function(df, conditions, conditionColumn, guessNumberColumn, ...){
#TODO error handling / santity checking of all required parameters.
t <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(t) <- list("guessNumber","condition","percentCracked")
guessNumberSequence <- makeGuessNumberSequence(...);
for(gN in guessNumberSequence){
for (condition in conditions){
conditionSubset <- df[df[,conditionColumn] == condition,]
cGuessNumbers <- conditionSubset[[guessNumberColumn]]
t <- rbind(t, data.frame(guessNumber=gN,
condition=condition,
percentCracked = getPercentageCracked(gN, cGuessNumbers)))
}
}
t
}
df.p <- getPercentageDataFrame(d, c("Control","Mangled"),conditionColumn = "group_id", "guesses_log10")
View(df.p)
plotPercentageDataFrame <- function(df.p){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line()
}
plotPercentageDataFrame(df.p)
plotGuessNumbers <- function(df, conditions, conditionColumn, guessNumberColumn, min = 0, cutOffMax = 20, ...){
df.p <- getPercentageDataFrame(df,conditions,guessNumberColumn, min = min, cutOffMax = cutOffMax, ...)
plotPercentageDataFrame(df.p);
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotGuessNumbers <- function(df, conditions, conditionColumn, guessNumberColumn, min = 0, cutOffMax = 20, ...){
df.p <- getPercentageDataFrame(df=df,
conditions=conditions,
conditionColumn=conditionColumn,
guessNumberColumn=guessNumberColumn,
min = min,
cutOffMax = cutOffMax, ...)
plotPercentageDataFrame(df.p, ...);
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotPercentageDataFrame <- function(df.p, labs.x = "Guess Number (log10)", labs.y = "Percentage Guessed"){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
labs(x=labs.x,y=labs.y)
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotPercentageDataFrame <- function(df.p, labs.x = "Guess Number (log10)", labs.y = "Percentage Guessed"){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
scale_y_continuous(labels = function(x){ paste0(x, "%") }) +
labs(x=labs.x,y=labs.y)
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotPercentageDataFrame <- function(df.p, labs.x = "Guess Number (log10)", labs.y = "Percentage Guessed"){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
scale_y_continuous(labels = function(x){ paste0(x, "%")}) +
labs(x=labs.x,y=labs.y)
}
plotGuessNumbers <- function(df, conditions, conditionColumn, guessNumberColumn, min = 0, cutOffMax = 20, ...){
df.p <- getPercentageDataFrame(df=df,
conditions=conditions,
conditionColumn=conditionColumn,
guessNumberColumn=guessNumberColumn,
min = min,
cutOffMax = cutOffMax, ...)
plotPercentageDataFrame(df.p, ...);
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotPercentageDataFrame <- function(df.p, labs.x = "Guess Number (log10)", labs.y = "Percentage Guessed"){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
scale_y_continuous(labels = function(x){ paste0(x, "%")}) +
labs(x=labs.x,y=labs.y) +
guide_legend(title="Condition")
}
plotGuessNumbers <- function(df, conditions, conditionColumn, guessNumberColumn, min = 0, cutOffMax = 20, ...){
df.p <- getPercentageDataFrame(df=df,
conditions=conditions,
conditionColumn=conditionColumn,
guessNumberColumn=guessNumberColumn,
min = min,
cutOffMax = cutOffMax, ...)
plotPercentageDataFrame(df.p, ...);
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
scale_y_continuous(labels = function(x){ paste0(x, "%")}) +
labs(x=labs.x,y=labs.y, color="Condition")
plotGuessNumbers <- function(df, conditions, conditionColumn, guessNumberColumn, min = 0, cutOffMax = 20, ...){
df.p <- getPercentageDataFrame(df=df,
conditions=conditions,
conditionColumn=conditionColumn,
guessNumberColumn=guessNumberColumn,
min = min,
cutOffMax = cutOffMax, ...)
plotPercentageDataFrame(df.p, ...);
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
plotPercentageDataFrame <- function(df.p, labs.x = "Guess Number (log10)", labs.y = "Percentage Guessed"){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
scale_y_continuous(labels = function(x){ paste0(x, "%")}) +
labs(x=labs.x,y=labs.y, color="Condition")
}
plotGuessNumbers <- function(df, conditions, conditionColumn, guessNumberColumn, min = 0, cutOffMax = 20, ...){
df.p <- getPercentageDataFrame(df=df,
conditions=conditions,
conditionColumn=conditionColumn,
guessNumberColumn=guessNumberColumn,
min = min,
cutOffMax = cutOffMax, ...)
plotPercentageDataFrame(df.p, ...);
}
plotGuessNumbers(df = d,
conditions = c("Control","Passphrase","Mangled","Decoy"),
conditionColumn = "group_id",
guessNumberColumn = "guesses_log10"
)
source('../plots.R')
source('../plots.R')
source('../guess-number-plot.R')
conditions <- c("Control","Passphrase", "Mangled", "Decoy");
d = read.csv("./data/paper-graphs-data.csv",header=T,sep=";"); # final set of 83 participants
d99 <- read.csv("./decoydata.csv",header=T,sep=";")
d$group_id <- factor(d$group_sub, levels = c("A","BT","BD","C"), labels = conditions);
d99$group_id <- factor(d99$group_id,levels = c(1,2,3,4), labels = conditions)
treatmentGroups <- c("Passphrase", "Mangled", "Decoy")
zxcvbnMetrics <- c("password_length","digit","upper","lower")
plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10")
d.own.all <- d[d$used_own_password == "YES",]
plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10")
percentageFrame <- getPercentageDataFrame(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10")
View(percentageFrame)
summary(gam(percentCracked ~ s(guessNumber) + condition))
summary(gam(percentCracked ~ s(guessNumber) + condition), data=percentageFrame)
summary(gam(percentCracked ~ s(guessNumber) * condition,data=percentageFrame))
summary(gam(percentCracked ~ s(guessNumber) +condition,data=percentageFrame))
percentagGAM <- gam(percentCracked ~ s(guessNumber) +condition,data=percentageFrame)
source('../plotGAM.R')
source('../util.R')
generatePDF(percentagGAM, controlVariables = c("guessNumber"), predictors = c("condition"))
outputSummary(percentagGAM)
guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10")
savePlot(guessNumberPlot, "guess-number-plot.pdf",path="graphs", width=5, height=3)
savePlot(guessNumberPlot, "guess-number-plot.pdf",path="graphs", width=6, height=3)
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R', encoding = 'UTF-8')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
g <- ggplot(guessesSummary, aes(x=guessesSummary[[dependentVariable]], y=guessesSummary[[groupVariable]], fill=guessesSummary[[groupVariable]])) +
scale_x_log10() +
geom_errorbarh(aes(x=guessesSummary[[dependentVariable]], xmin=guessesSummary[[dependentVariable]]-ci, xmax=guessesSummary[[dependentVariable]]+ci, height=0)) +
geom_point(aes(colour=guessesSummary[[groupVariable]]), size=5) +
theme(panel.background = element_rect(fill = 'grey98', linetype = "solid"), legend.position="bottom") +
theme(panel.grid.major = element_line(colour = "grey87"), panel.grid.major.y = element_line(colour = "grey95")) +
theme(panel.grid.minor = element_blank()) +
theme(text = element_text(size=18)) +
theme(axis.text.y = element_text(colour = "black", size = 16)) +
theme(axis.text.x = element_text(colour = "grey60", size = 13)) +
theme(axis.ticks.x = element_line(colour = "grey87"), axis.ticks.length = unit(0.2, "cm")) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none" ,legend.spacing.x = 20);
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
savePlot(guessNumberPlot, "guess-number-plot.pdf",path="graphs", width=6, height=3)
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
savePlot(guessNumberPlot, "guess-number-plot.pdf",path="graphs", width=6, height=3)
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10", legend.position="top"))
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10", legend.position="top"))
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
savePlot(guessNumberPlot, "guess-number-plot.pdf",path="graphs", width=6, height=3)
source('~/Dissertation/statistics/guess-number-plot.R')
(guessNumberPlot <- plotGuessNumbers(d.own.all, conditions = conditions, conditionColumn = "group_id", guessNumberColumn = "guesses_log10"))
savePlot(guessNumberPlot, "guess-number-plot.pdf",path="graphs", width=6, height=3)
d = read.csv("./data/paper-graphs-data.csv",header=T,sep=";"); # final set of 83 participants
conditions <- c("Control","Passphrase", "Mangled", "Decoy");
d$group_id <- factor(d$group_sub, levels = c("A","BT","BD","C"), labels = conditions);
treatmentGroups <- c("Passphrase", "Mangled", "Decoy")
d.own.all <- d[d$used_own_password == "YES",]
d.own.treatment <- d[d$used_own_password == "YES" & d$group_id %in% treatmentGroups,]
d.treatment <- d[d$group_id %in% treatmentGroups,]
View(d99)
counts <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(t) <- list("behavior","count")
colnames(counts) <- list("behavior","count")
View(counts)
d.treatment$score[d.treatment$score < 3]
length(d.treatment$score[d.treatment$score < 3])
counts <- rbind(counts, data.frame(behavior="ineffective",count=length(d.treatment$score[d.treatment$score < 3])))
View(counts)
counts <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(counts) <- list("behavior","count")
counts <- rbind(counts, data.frame(behavior="ineffective",count=length(d.treatment$score[d.treatment$score < 3  & d.treatment$used_own_password == "YES"])))
View(counts)
counts <- rbind(counts, data.frame(behavior="on-par",
count=length(d.treatment$score[d.treatment$score > 2 & d.treatment$used_own_password == "YES"])))
View(counts)
counts <- rbind(counts, data.frame(behavior="effective",
count=length(d.treatment$score[d.treatment$used_own_password == "NO"])))
ggplot(data=counts, aes(x=behavior,y=count,group=behavior)) + geom_bar(stat="identity")
ggplot(data=counts, aes(x=behavior,y=count,group=behavior)) + geom_bar(stat="identity",position = "fill")
ggplot(data=counts, aes(x=behavior,y=count,group=behavior)) + geom_bar(stat="identity",position = "group")
ggplot(data=counts, aes(x=behavior,y=count,fill=behavior)) + geom_bar(stat="identity",position = "fill")
ggplot(data=counts, aes(x=behavior,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
ggplot(data=counts, aes(fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
ggplot(data=counts, aes(x=behavior,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
ggplot(data=counts, aes(x=behavior,y=count,fill=behavior)) +
geom_bar(stat="count",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
ggplot(data=counts, aes(x=behavior,fill=behavior)) +
geom_bar(stat="count",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
ggplot(data=counts, aes(x=count,y=behavior,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
ggplot(data=counts, aes(x=count,y=behavior,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
coord_flip()
ggplot(data=counts, aes(x=count,y=dummycol,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
coord_flip()
counts <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(counts) <- list("dummycol","behavior","count")
counts <- rbind(counts, data.frame(dummycol="y",
behavior="ineffective",
count=length(d.treatment$score[d.treatment$score < 3  & d.treatment$used_own_password == "YES"])))
counts <- rbind(counts, data.frame(dummycol="y",
behavior="on-par",
count=length(d.treatment$score[d.treatment$score > 2 & d.treatment$used_own_password == "YES"])))
counts <- rbind(counts, data.frame(dummycol="y",
behavior="effective",
count=length(d.treatment$score[d.treatment$used_own_password == "NO"])))
ggplot(data=counts, aes(x=count,y=dummycol,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
coord_flip()
ggplot(data=counts, aes(x=behavior,y=dummycol,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
coord_flip()
ggplot(data=counts, aes(x=count,y=dummycol,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
coord_flip()
View(counts)
ggplot(data=counts, aes(x=dummycol,y=count,fill=reorder(behavior,count))) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip()
counts <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(counts) <- list("dummycol","behavior","count")
counts <- rbind(counts, data.frame(dummycol="y",
behavior="ineffective (own password, sub-par score)",
count=length(d.treatment$score[d.treatment$score < 3  & d.treatment$used_own_password == "YES"])))
counts <- rbind(counts, data.frame(dummycol="y",
behavior="on-par (own password, on-par score)",
count=length(d.treatment$score[d.treatment$score > 2 & d.treatment$used_own_password == "YES"])))
counts <- rbind(counts, data.frame(dummycol="y",
behavior="effective (suggestion accepted)",
count=length(d.treatment$score[d.treatment$used_own_password == "NO"])))
ggplot(data=counts, aes(x=dummycol,y=count,fill=reorder(behavior,count))) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", col = "Resulting Behavior") +
theme(axis.text.y = element_blank()) +
theme(axis.ticks.y = element_blank()) +
theme(axis.title.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=reorder(behavior,count))) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", color = "Resulting Behavior") +
theme(axis.text.y = element_blank()) +
theme(axis.ticks.y = element_blank()) +
theme(axis.title.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=reorder(behavior,count))) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", color = "Resulting Behavior") +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", color = "Resulting Behavior") +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=reorder(behavior))) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", color = "Resulting Behavior") +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", col = "Resulting Behavior") +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", col = "Resulting Behavior") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", col = "Behavior") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution", y = "Behavior") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(x = "Distribution") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(y = "Distribution") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(y = "Proportion of Treatment Groups") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
proportionTreatmentEffectivenessPlot <- ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(y = "Proportion of Treatment Groups") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
savePlot(proportionTreatmentEffectivenessPlot, "treatment-impact.pdf")
savePlot(proportionTreatmentEffectivenessPlot, "treatment-impact.pdf",path="graphs")
savePlot(proportionTreatmentEffectivenessPlot, "treatment-impact.pdf",path="graphs", height=1)
counts <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(counts) <- list("dummycol","behavior","count")
counts <- rbind(counts, data.frame(dummycol="y",
behavior="ineffective (own password, weak score)",
count=length(d.treatment$score[d.treatment$score < 3  & d.treatment$used_own_password == "YES"])))
counts <- rbind(counts, data.frame(dummycol="y",
behavior="on-par (own password, on-par score)",
count=length(d.treatment$score[d.treatment$score > 2 & d.treatment$used_own_password == "YES"])))
counts <- rbind(counts, data.frame(dummycol="y",
behavior="effective (suggestion accepted)",
count=length(d.treatment$score[d.treatment$used_own_password == "NO"])))
proportionTreatmentEffectivenessPlot <- ggplot(data=counts, aes(x=dummycol,y=count,fill=behavior)) +
geom_bar(stat="identity",position = "fill") +
scale_y_continuous(labels = percent_format()) +
coord_flip() +
labs(y = "Proportion of Treatment Groups") +
guides(colour = guide_legend(reverse=T)) +
theme(axis.text.y = element_blank(),axis.title.y = element_blank()) +
theme(axis.ticks.y = element_blank())
savePlot(proportionTreatmentEffectivenessPlot, "treatment-impact.pdf",path="graphs", height=1)
(ciLengthOwn <- plotCI(d.own.all, dependentVariable = "length", groupVariable = "group_id", xAxisTitle = "Password Length", minValue = 8, maxValue = 16, step=1))
source('../plotCI.R')
d = read.csv("./data/paper-graphs-data.csv",header=T,sep=";"); # final set of 83 participants
conditions <- c("Control","Passphrase", "Mangled", "Decoy");
d$group_id <- factor(d$group_sub, levels = c("A","BT","BD","C"), labels = conditions);
d99$group_id <- factor(d99$group_id,levels = c(1,2,3,4), labels = conditions)
treatmentGroups <- c("Passphrase", "Mangled", "Decoy")
zxcvbnMetrics <- c("password_length","digit","upper","lower")
d.own.all <- d[d$used_own_password == "YES",]
(ciLengthOwn <- plotCI(d.own.all, dependentVariable = "length", groupVariable = "group_id", xAxisTitle = "Password Length", minValue = 8, maxValue = 16, step=1))
View(d.own.all)
(ciLengthOwn <- plotCI(d.own.all, dependentVariable = "password_length", groupVariable = "group_id", xAxisTitle = "Password Length", minValue = 8, maxValue = 16, step=1))
savePlot(ciLengthOwn, "graphs/ci-length-own.pdf", width=5, height=3)
(ciLengthOwn <- plotCI(d.own.all, dependentVariable = "password_length", groupVariable = "group_id", xAxisTitle = "Password Length", minValue = 8, maxValue = 16, step=1))
(ciLengthOwn <- plotCI(d.own.all, dependentVariable = "password_length", groupVariable = "group_id", xAxisTitle = "Password Length", minValue = 8, maxValue = 16, step=1))
savePlot(ciLengthOwn, "graphs/ci-length-own.pdf", width=10, height=3)
gam(password_length_corrected ~ group_id, data = d.own.all)
gam(pw_length_corrected ~ group_id, data = d.own.all)
summary(gam(pw_length_corrected ~ group_id, data = d.own.all))
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
plotPercentageDataFrame <- function(df.p, labs.x = "Guess Number", labs.y = "Percentage Guessed", ...){
# plot!
ggplot(data=df.p, aes(x = guessNumber, y = percentCracked, colour=condition, group = condition)) +
geom_line() +
scale_y_continuous(labels = function(x){ paste0(x, "%")}) +
scale_x_continuous(labels = math_format(10^.x)) +
theme(legend.position = "top") +
labs(x=labs.x,y=labs.y, color="Condition")
}
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
source('~/Dissertation/statistics/guess-number-plot.R')
